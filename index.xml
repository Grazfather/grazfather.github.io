<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Grazfather</title>
    <link>https://grazfather.github.io/</link>
    <description>Recent content on Grazfather</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Sun, 08 Dec 2019 12:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://grazfather.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>Glitching the Olimex LPC-P1343</title>
        <link>https://grazfather.github.io/posts/2019-12-08-glitcher/</link>
        <pubDate>Sun, 08 Dec 2019 12:00:00 +0000</pubDate>
        
        <guid>https://grazfather.github.io/posts/2019-12-08-glitcher/</guid>
        <description>Grazfather https://grazfather.github.io/posts/2019-12-08-glitcher/ -&lt;p&gt;Back in the summer I was lucky enough to finagle my boss into letting me take Dmitry Nedospasov (&lt;a href=&#34;https://twitter.com/nedos&#34;&gt;@nedos&lt;/a&gt;)&amp;rsquo;s &lt;a href=&#34;https://toothless.co/trainings/&#34;&gt;hardware hacking training&lt;/a&gt;. In it I cut my teeth on using an FPGA to interface with target hardware. After implementing a UART we implemented a module that could parse part of Apple&amp;rsquo;s OneWire, used to negotiate power exchange, among other things, with your iPhone over the lightning cable. Our &amp;lsquo;final project&amp;rsquo; was to build a UART-controllable glitcher, using it to try to glitch a development board.&lt;/p&gt;
&lt;p&gt;While we got it working, it was with a bit of hand-holding from Dmitry, including setting up the scope, the power supply etc. In an effort to concretize the knowledge, I decided when I got home that I wanted to do it again on my own.&lt;/p&gt;
&lt;p&gt;If you haven&amp;rsquo;t noticed, hobbyist FPGAs have flooded the market. In 2015 Lattice&amp;rsquo;s iCE40 series FPGA had &lt;a href=&#34;https://www.youtube.com/watch?v=SOn0g3k0FlE&#34;&gt;its bitstream format reverse engineered&lt;/a&gt;, spawning an explosion of open source tooling for synthesizing, place and route, and simulation. Altera&amp;rsquo;s (Intel&amp;rsquo;s) and Xilinx&amp;rsquo;s bit stream format have not been reverse engineered, and so you are stuck using their tools if you decide to develop on those boards. I&amp;rsquo;ve played around with a few boards, and the &lt;a href=&#34;https://www.crowdsupply.com/1bitsquared/icebreaker-fpga&#34;&gt;iCEBreaker&lt;/a&gt; is my recent favourite. The people on their Discord are super helpful, the toolchain is excellent, and the board itself is great for the price.&lt;/p&gt;
&lt;p&gt;Porting it over wasn&amp;rsquo;t too much work, the only real difference was that the FPGA we used in training was a Digilent Arty, which has a 100MHz clock, while the iCEBreaker&amp;rsquo;s has a 12MHz. This requires we change anything that&amp;rsquo;s counting cycles to account for the 8.33x slower clock, and we lose some granularity in anything we want to count (since each clock cycle has a longer duration). This is also an opportunity to generalize some of the code to not make as many assumptions about the FPGA it&amp;rsquo;s running on. Because I was rusty, I chose to try to &amp;lsquo;blindly&amp;rsquo; re-write some of the modules, instead of using the code Dmitry has on &lt;a href=&#34;https://github.com/toothlessco/arty-glitcher&#34;&gt;his github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://grazfather.github.io/assets/2019-12-08-glitching/glitcher_clean.jpg&#34;&gt;&lt;img src=&#34;https://grazfather.github.io/assets/2019-12-08-glitching/glitcher_clean.jpg&#34; alt=&#34;glitcher setup&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;background&#34;&gt;Background&lt;/h1&gt;
&lt;p&gt;I can&amp;rsquo;t really give a better background to this than Dmitry does in his &lt;a href=&#34;https://toothless.co/blog/bootloader-bypass-part1/&#34;&gt;blog post&lt;/a&gt; about it. In short, when the target board boots up the bootROM reads the flash, and depending on the value it reads from address 0x2FC, and the state of a few pins, it determines whether the UART goes to a sort of shell, and whether you can use this shell to read out the flash. This is intended so that you can develop your firmware and debug in the bootloader, but then flash a version that sets this value when your firmware is production ready, hopefully preventing the end user from dumping it from the flash. The vulnerability here is that it&amp;rsquo;s a 4 byte value, and only a specific value (0x12345678) will lock the bootloader in the expected way. That means that if any of the 32 bits read here are read incorrectly, the bootROM will consider the device unlocked. This is opposed to, for example, requiring a specific value to unlock the bootloader, and having the other 4 billion values lock it.&lt;/p&gt;
&lt;p&gt;If we can get the CPU to misread the flash at the very moment it happens to be reading that value, then we can have it jump to the bootloader in the unlocked state. It&amp;rsquo;s as easy as that! (Famous last words)&lt;/p&gt;
&lt;p&gt;The idea here is that we will use the FPGA as a tool that goes between my host machine and the target board. We can communicate with it using UART, and certain special bytes are interpreted as commands for the FPGA, while other values are simply passed through to the target board (to talk to its bootloader). The values sent back from the target board are simply passed directly through to the host machine. The FPGA supports configuring the delay between resetting the target board and pulsing a &amp;lsquo;glitch voltage&amp;rsquo;, and how long that glitch pulse lasts. It also supports sending multiple pulses, and of course can reset the target board and activate the glitch.&lt;/p&gt;
&lt;p&gt;We use an FPGA here instead of a microcontroller for a few reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First, because we can configure things at the clock level, we can have very specific timing (1s/12000000 = 83.3ns precision).&lt;/li&gt;
&lt;li&gt;Second, for the same reason, we don&amp;rsquo;t have to worry about jitter: With a raspberry PI we&amp;rsquo;d worry about the OS scheduling other process and such, contributing to inconsistency between runs. Even with an Arduino or other microcontroller, with no operating system, we&amp;rsquo;d have to worry about interrupts messing up the timing.&lt;/li&gt;
&lt;li&gt;Third, I wanted to get more practice writing Verilog and using an FPGA.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;setup&#34;&gt;Setup&lt;/h1&gt;
&lt;p&gt;For the toolchain, I mostly took everything from &lt;a href=&#34;https://github.com/icebreaker-fpga/WTFpga&#34;&gt;WTFpga&lt;/a&gt;, which is a beginner&amp;rsquo;s lab that uses the iCEBreaker board. It uses &lt;a href=&#34;https://github.com/YosysHQ/yosys&#34;&gt;Yosys&lt;/a&gt;, &lt;a href=&#34;https://github.com/YosysHQ/nextpnr&#34;&gt;nextpnr&lt;/a&gt;, and a few tools from project &lt;a href=&#34;https://github.com/cliffordwolf/icestorm&#34;&gt;icestorm&lt;/a&gt;. These are all open source tools that you can invoke from the command line, you don&amp;rsquo;t need a GUI (so I don&amp;rsquo;t need to run Vivado in a VM) and the time to build is &lt;em&gt;much, much&lt;/em&gt; faster than the few minutes it takes to get a synthesis to fail with obscure errors in Vivado. This really sped me up because I am not disciplined and instead of inspecting my code for errors ahead of time, I tend to compile, patch, and iterate until it builds.&lt;/p&gt;
&lt;p&gt;For debugging I used PulseView (part of &lt;a href=&#34;https://sigrok.org/&#34;&gt;sigrok&lt;/a&gt;) when debugging real signals, and GTKwave to look at my simulated waveforms.&lt;/p&gt;
&lt;p&gt;For hardware, I obviously used the iCEBreaker, as well as the &lt;a href=&#34;https://www.olimex.com/Products/ARM/NXP/LPC-P1343/&#34;&gt;Olimex target board&lt;/a&gt;. My bench top supply is a DC50V5A, a cheap but handy configurable buck converter I got on Ali express. While I have a Saleae, I prefer Sigrok, and at the speeds I was running things at, a cheap 24MHz logic analyzer was enough. In the end I had some troubles debugging something using that alone and borrowed an oscilloscope, but in hindsight it wasn&amp;rsquo;t necessary, just nice to have.&lt;/p&gt;
&lt;h1 id=&#34;design&#34;&gt;Design&lt;/h1&gt;
&lt;p&gt;Again, I am just porting over Dmitry&amp;rsquo;s design, so here&amp;rsquo;s the block drawing stolen from his &lt;a href=&#34;https://toothless.co/blog/bootloader-bypass-part2/&#34;&gt;blog&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://grazfather.github.io/assets/2019-12-08-glitching/glitcher_block_diagram.png&#34;&gt;&lt;img src=&#34;https://grazfather.github.io/assets/2019-12-08-glitching/glitcher_block_diagram.png&#34; alt=&#34;glitcher block diagram&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The tl;dr:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;cmd&lt;/code&gt; module intercepts everything the host computer sends over UART. Based on the first byte it either interprets it as a command for the FPGA, or passes it through to the target.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;resetter&lt;/code&gt; simply holds the reset line down long enough for the target to reset (instead of one cycle).&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;delay&lt;/code&gt; module starts counting on reset and waits the configured number of cycles before sending its own signal.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;trigger&lt;/code&gt; module waits for the delay to finish and then tells the pulse module to send a pulse.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;pulse&lt;/code&gt; module is a lot like the delay module, except that it uses a different config, and its output is connected to the power multiplexer.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is all controlled by a python script that talks to the UART, first configuring the FPGA, then activating a glitch, and then communicating with the target. It determines whether it can read out the flag, and if it can&amp;rsquo;t, it adjusts the delay and pulse width configs and tries again.&lt;/p&gt;
&lt;p&gt;The FPGA has two inputs: The UART from the host, and the UART from the target board. It has 4 outputs: The UART to the host, the UART to the target board, a reset line to reset the target, and a &lt;code&gt;vout&lt;/code&gt; that is used to control the analogue multiplexer, to quickly drop the voltage powering the target board.&lt;/p&gt;
&lt;h1 id=&#34;testing&#34;&gt;Testing&lt;/h1&gt;
&lt;p&gt;While you can certainly test on a real FPGA, it&amp;rsquo;s very difficult to see what&amp;rsquo;s going on inside the FPGA. You can blink LEDs, or, if you have the hardware, use seven segments displays to output whatever relevant value. I found this very handy and ended up buying a second just so that I could tell both my pulse width and delay count at a glance.&lt;/p&gt;
&lt;p&gt;That said, even with the rather quick tools, flashing and debugging with a logic analyzer is a lot slower than ideal. I suggest setting up a good test bench and run simulations.&lt;/p&gt;
&lt;h2 id=&#34;simulation&#34;&gt;Simulation&lt;/h2&gt;
&lt;p&gt;I used &lt;a href=&#34;http://iverilog.icarus.com/&#34;&gt;Icarus Verilog&lt;/a&gt; to simulate the various modules, and &lt;a href=&#34;http://gtkwave.sourceforge.net/&#34;&gt;GTKWave&lt;/a&gt; to look at the waveforms it generates. The basic idea is that you write extra verilog that simulates the inputs to your top module, and then verify that behaviour of the internal signals are as expected. As opposed to running on real hardware, it&amp;rsquo;s easy to introspect any internal value any any point in time. You can also write test benches for any individual module, ensure that each part is behaving as expected before combining them together.&lt;/p&gt;
&lt;p&gt;Here we see my simulation of the whole glitcher, I send a few configurations, and then some commands that should be passed through to the target.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://grazfather.github.io/assets/2019-12-08-glitching/glitcher_testbench_cmds.png&#34;&gt;&lt;img src=&#34;https://grazfather.github.io/assets/2019-12-08-glitching/glitcher_testbench_cmds.png&#34; alt=&#34;glitcher commands simulation&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And here is what happens when the glitch command is sent. We see the reset line go down, then there is a delay based on the delay configuration we previously set, and the &lt;code&gt;vout&lt;/code&gt; line goes low for a period of time determined by the pulse width configuration.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://grazfather.github.io/assets/2019-12-08-glitching/glitcher_testbench_pulse.png&#34;&gt;&lt;img src=&#34;https://grazfather.github.io/assets/2019-12-08-glitching/glitcher_testbench_pulse.png&#34; alt=&#34;glitcher pulse simulation&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;While a simulation is good, the real test is when you see it work on real hardware, which I was able to see here with my logic analyzer:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://grazfather.github.io/assets/2019-12-08-glitching/glitcher_logic_analyzer.png&#34;&gt;&lt;img src=&#34;https://grazfather.github.io/assets/2019-12-08-glitching/glitcher_logic_analyzer.png&#34; alt=&#34;glitcher logic analyzer dump&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;troubles&#34;&gt;Troubles&lt;/h1&gt;
&lt;p&gt;The Olimex board actually runs faster than my FPGA, and in training our FPGA was more than 8 times faster. In practice our successful glitch had a very short pulse, in the tens of cycles (at 100MHz). With a 12MHz clock (I thought) I was in trouble. There is significantly less granularity in pulse widths, and we risk the ideal pulse width between somewhere between a n cycles and (n+1) cycles.&lt;/p&gt;
&lt;p&gt;I tried to fix this by using a &lt;a href=&#34;https://en.wikipedia.org/wiki/Phase-locked_loop&#34;&gt;PLL&lt;/a&gt; which allows you to generate a clock that is faster than the input clock by some multiple. Again, icestorm to the rescue here, I was able to use &lt;code&gt;icepll&lt;/code&gt; to generate most of the code needed to generate a 48MHz clock from a 12MHz input.&lt;/p&gt;
&lt;p&gt;I kept most modules on the main clock, but fed my new &lt;code&gt;fast_clk&lt;/code&gt; to the pulse module. I adjusted my testbench to generate the faster clock and was able to verify that I could generate shorter pulses (with four times the granularity). I actually found a bug in my pulse module here: Since my pulse module was running on a clock four times faster than the rest of the system, including the module that enables the pulse, with short width values my pulse was ending &lt;em&gt;before the enable signal was unset&lt;/em&gt;. This was causing the pulse module to immediately start a second pulse. I fixed this by adding an extra state to the module that made it wait until after the enable signal was unset before returning to the waiting state.&lt;/p&gt;
&lt;p&gt;Unfortunately, when I ran this on real hardware, I found that my pulse width seemed to be consistently the same value. I was unable to debug this and decided to see if I could get the glitch to work without the finer granularity (spoiler: I could).&lt;/p&gt;
&lt;h1 id=&#34;running-it-in-real-life&#34;&gt;Running it in real life&lt;/h1&gt;
&lt;p&gt;Once I had my simulation looking good, and I was able to see that the behaviour in the real world looked like what I was expecting, it was time to actually glitch the board.&lt;/p&gt;
&lt;h2 id=&#34;modifying-the-board&#34;&gt;Modifying the board&lt;/h2&gt;
&lt;p&gt;To have the CPU misread the lock value we want the voltage to drop at precisely the time when it&amp;rsquo;s reading the appropriate address from flash. Because there are decoupling capacitors on the board, which would smooth out any abrupt voltage change and make this a lot more difficult, I had to remove those capacitors. I also cut traces between the board&amp;rsquo;s voltage regulator and the VCC and VCCIO, so that it&amp;rsquo;s powered exclusively from the output of my analogue multiplexer. This is all well documented in the third part of &lt;a href=&#34;https://toothless.co/blog/bootloader-bypass-part3/#modifying-the-target&#34;&gt;Dmitry&amp;rsquo;s blog series&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;determining-the-supply-voltage&#34;&gt;Determining the supply voltage&lt;/h2&gt;
&lt;p&gt;Because we don&amp;rsquo;t live in a frictionless vacuum where infinitely fast changes in voltage are possible, even without decoupling capacitors the CPU won&amp;rsquo;t see an instantaneous change in voltage when we toggle &lt;code&gt;vout&lt;/code&gt;. Because of this, we want to minimize the time the voltage change happens, and so we run the board at the lowest voltage we can find where the board behaves normally.&lt;/p&gt;
&lt;p&gt;For me this was 2.30V, which I determined by running a loop where I continuously reset the board and then tried to communicate with the bootloader. I adjusted the voltage on my benchtop supply while this was running until it was just barely high enough to reliably read &amp;ldquo;Synchronized&amp;rdquo; after sending the &amp;ldquo;?&amp;rdquo; bootloader command. The glitch voltage for my setup was simply 0V, but this was mostly due to me only having a single channel power supply. You might be able to more reliably reproduce the glitch if instead of glitching between X and 0 you glitch between X and Y, but if I got it to work with 0V, you can, too.&lt;/p&gt;
&lt;h2 id=&#34;the-moment-of-truth&#34;&gt;The moment of truth&lt;/h2&gt;
&lt;p&gt;I hooked up the reset line of my FPGA to the reset on the board, hooked up &lt;code&gt;vout&lt;/code&gt; to the control pin of the multiplexer, tied &lt;code&gt;Vglitch&lt;/code&gt; to ground, and then tied &lt;code&gt;Vcc&lt;/code&gt; to the 2.3V I determined as the minimum stable voltage.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://grazfather.github.io/assets/2019-12-08-glitching/glitcher_setup.jpg&#34;&gt;&lt;img src=&#34;https://grazfather.github.io/assets/2019-12-08-glitching/glitcher_setup.jpg&#34; alt=&#34;glitcher setup&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A friend from work let me borrow his oscilloscope, so I was able to see in real time the reset signal followed by the vout signal pulsing and the corresponding voltage drop in &lt;code&gt;Vcc&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://grazfather.github.io/assets/2019-12-08-glitching/glitcher_scope.jpg&#34;&gt;&lt;img src=&#34;https://grazfather.github.io/assets/2019-12-08-glitching/glitcher_scope.jpg&#34; alt=&#34;oscilloscope view&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The yellow line is the reset signal, which is held low for 5uS, and then &lt;code&gt;vout&lt;/code&gt;, the cleaner purple signal, is toggled &lt;em&gt;delay&lt;/em&gt; cycles later, for &lt;em&gt;pulse width&lt;/em&gt; cycles. The cyan signal is the actual voltage seen, which we can see is &amp;lsquo;dirtier&amp;rsquo; than the purely logic-level &lt;code&gt;vout&lt;/code&gt; signal.&lt;/p&gt;
&lt;p&gt;Given enough time you can basically brute force any combination of delay and width, but knowing that the board boots in under 100uS and knowing that with pulses too wide we never get a stable system I played with delays between 60 and 1200 cycles (5uS to 100uS) and pulses between 1 and 25 cycles.&lt;/p&gt;
&lt;p&gt;I then ran my script, which brute forced through the range of delay and pulse width values until I was treated to a nice dump of the flash I was not supposed to read! You can see in the video below that the width of the pulse get wider until it reaches its max, at which point the delay is incremented and the width values are all tried again.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;And with a certain width and delay (15 and 680 in my case) our script dumps out the flash!&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://grazfather.github.io/assets/2019-12-08-glitching/glitcher_success.png&#34;&gt;&lt;img src=&#34;https://grazfather.github.io/assets/2019-12-08-glitching/glitcher_success.png&#34; alt=&#34;glitcher pulse simulation&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If we look at the lock value at 0x2fc, we see that it&amp;rsquo;s 0x12345678 as we expect:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://grazfather.github.io/assets/2019-12-08-glitching/glitcher_lockvalue.png&#34;&gt;&lt;img src=&#34;https://grazfather.github.io/assets/2019-12-08-glitching/glitcher_lockvalue.png&#34; alt=&#34;glitcher pulse simulation&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We don&amp;rsquo;t see a glitched out value because this dump is &lt;em&gt;after&lt;/em&gt; we&amp;rsquo;ve glitched the bootloader, with the voltage back at its stable value. At this point in time the bootloader has already (incorrectly) determined that the bootloader is unlocked, and so all subsequent reads succeed. We don&amp;rsquo;t know exactly what happened during the glitch: The read could have misread the value from flash, the comparator could have mis-behaved, the conditional flag could have not been set, the jump instruction could have been skipped, or countless other weird things. What we do know, however, is that we got what we want: The bootloader running stably in a state where it thinks the flash isn&amp;rsquo;t locked down.&lt;/p&gt;
&lt;p&gt;Of course in real life things didn&amp;rsquo;t go this smoothly, while testing it out I found a bunch of bugs, including how if my delay was too short it would send a pulse while the reset was still low and my pulse width counter had an off-by-one in counting its cycles, among other things, so don&amp;rsquo;t worry if you try this and have issues as well: Isolate the issue, make sure your simulation works, compare to real life, and debug.&lt;/p&gt;
&lt;h2 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;I found this to be a really fun personal project. I find repetition key to remembering things, and so rewriting modules I had written months ago, relearning Verilog syntax, and hitting the same issues while debugging (hopefully) helped me to remember it for next time.&lt;/p&gt;
&lt;p&gt;On the FPGA side, the open source tool chain I used for the FPGA stuff was very easy to use, and being able to quickly build both simulations and the real bitstream helped me iterate a lot more quickly. It was well worth my time to get my Makefile running nicely.&lt;/p&gt;
&lt;p&gt;On the glitching side, I found that it really demystified the whole thing for me. If I can whip up something that is apparently precise enough to (sort of) reliably glitch a target board running in the dozens of MHz, I must be doing something right.&lt;/p&gt;
&lt;p&gt;I wouldn&amp;rsquo;t have been able to do this without a lot of help from Dmitry. Even now months after taking his training he was willing to help me with whatever dumb questions I have. Seriously consider taking his &lt;a href=&#34;https://advancedsecurity.training/&#34;&gt;training&lt;/a&gt;. I had Dmitry look at this post before publishing and he offered a discount code! So if you sign up use the code &lt;code&gt;grazfather&lt;/code&gt; for 5% off!&lt;/p&gt;
&lt;p&gt;Since I was simultaneously trying to figure out glitching stuff while also re-learning Verilog &lt;em&gt;and&lt;/em&gt; trying to do it in a new ecosystem, I needed and received lot of help from the nice people on the 1bitsquared discord, so big thanks to them! If you&amp;rsquo;re looking for your own FPGA board, I can&amp;rsquo;t recommend the &lt;a href=&#34;https://www.crowdsupply.com/1bitsquared/icebreaker-fpga&#34;&gt;iCEBreaker&lt;/a&gt; enough!&lt;/p&gt;
&lt;p&gt;My code is available on &lt;a href=&#34;https://github.com/Grazfather/glitcher&#34;&gt;github&lt;/a&gt;, which includes the verilog to configure the FPGA, as well as the python script used to orchestrate everything. It&amp;rsquo;s heavily based on nedos&amp;rsquo;s &lt;a href=&#34;https://github.com/toothlessco/arty-glitcher&#34;&gt;own version&lt;/a&gt;.&lt;/p&gt;
- https://grazfather.github.io/posts/2019-12-08-glitcher/ - </description>
        </item>
    
    
    
        <item>
        <title>Microcorruption Hollywood</title>
        <link>https://grazfather.github.io/posts/2018-11-24-microcorruption-hollywood/</link>
        <pubDate>Sat, 24 Nov 2018 12:00:00 +0000</pubDate>
        
        <guid>https://grazfather.github.io/posts/2018-11-24-microcorruption-hollywood/</guid>
        <description>Grazfather https://grazfather.github.io/posts/2018-11-24-microcorruption-hollywood/ -&lt;p&gt;I&amp;rsquo;m a &lt;em&gt;few&lt;/em&gt; years late to the party here, but I&amp;rsquo;ve recently managed to finish &lt;a href=&#34;http://microcorruption.com&#34;&gt;Microcorruption&lt;/a&gt;. I had finished most of the challenges back in 2014, when they were released, but not having IDA back then, I was stumped when the first challenge that relocated showed up, because it broke the online disassembler, and I was helpless without it :).&lt;/p&gt;
&lt;p&gt;I recently took another look, having picked up some skill and knowledge in the intervening years. &lt;em&gt;Hollywood&lt;/em&gt;, the last challenge, was a very interesting challenge, and I found that most writeups I found online glossed over the difficulty of getting something coherent out of it, so I figured I would try to add a writeup that goes into more detail.&lt;/p&gt;
&lt;p&gt;The challenge is a simple prompt for the password, and the CPU just halts on improper input. Looking at the disassembly output was useless, since the web disassembler just disassembles linearly, and they used jumps to jump over a few, uesless bytes, but these bytes were disassembled as six-byte opcodes, hiding the actual instruction.&lt;/p&gt;
&lt;p&gt;Linear web disassembly:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;4400:&lt;/span&gt;  &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;013&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;jmp&lt;/span&gt;       &lt;span style=&#34;color:#75715e&#34;&gt;#0x4404 &amp;lt;main+0x4&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4402&lt;/span&gt;:  &lt;span style=&#34;color:#66d9ef&#34;&gt;d1a1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3140&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0044&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;dadd.b&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4031&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;sp&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4400&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;sp&lt;/span&gt;)
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;4408:&lt;/span&gt;  &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;013&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;jmp&lt;/span&gt;       &lt;span style=&#34;color:#75715e&#34;&gt;#0x440c &amp;lt;main+0xc&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;440&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;a&lt;/span&gt;:  &lt;span style=&#34;color:#66d9ef&#34;&gt;d1a1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1542&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;c01&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;dadd.b&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x4215&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;sp&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;0x15c&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;sp&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;IDA&amp;rsquo;s disassembly:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;ROM:&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;00004400&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;; ---------------------------------------------------------------------------
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;ROM:&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;00004400&lt;/span&gt;                 &lt;span style=&#34;color:#a6e22e&#34;&gt;jmp&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;loc_4404&lt;/span&gt;
ROM:&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;00004400&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;; ---------------------------------------------------------------------------
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;ROM:&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;00004402&lt;/span&gt;                 &lt;span style=&#34;color:#a6e22e&#34;&gt;.byte&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;D1h&lt;/span&gt;
ROM:&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;00004403&lt;/span&gt;                 &lt;span style=&#34;color:#a6e22e&#34;&gt;.byte&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;A1h&lt;/span&gt;
ROM:&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;00004404&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;; ---------------------------------------------------------------------------
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;ROM:&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;00004404&lt;/span&gt;
ROM:&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;00004404&lt;/span&gt; loc_4404:                               &lt;span style=&#34;color:#75715e&#34;&gt;; CODE XREF: ROM:00004400↑j
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;ROM:&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;00004404&lt;/span&gt;                 &lt;span style=&#34;color:#a6e22e&#34;&gt;mov.w&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;#4400h, SP
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ROM&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00004408&lt;/span&gt;                 &lt;span style=&#34;color:#66d9ef&#34;&gt;jmp&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;loc_440C&lt;/span&gt;
ROM:&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;00004408&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;; ---------------------------------------------------------------------------
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;ROM:&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;0000440&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;                 &lt;span style=&#34;color:#66d9ef&#34;&gt;.byte&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;D1h&lt;/span&gt;
ROM:&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;0000440&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;                 &lt;span style=&#34;color:#66d9ef&#34;&gt;.byte&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;A1h&lt;/span&gt;
ROM:&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;0000440&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;;&lt;/span&gt; ---------------------------------------------------------------------------&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Using a script I found online, I was able to convert the memory dump into a binary blob, which I could then import into IDA, selecting Texas Instrument MSP430 as the CPU type. Following through this code you see that the code relocates and seems to unpack. No problem, I just ran it in the web debugger until it prompted me for input, then I copied &lt;em&gt;that&lt;/em&gt; memory dump, created a new binary, and analyzed that in IDA.&lt;/p&gt;
&lt;p&gt;There were two problems with this approach. First, it used the &lt;code&gt;rand&lt;/code&gt; syscall, so where the code was unpacked to was non-deterministic, and would change between runs. This meant that I couldn&amp;rsquo;t follow along in both IDA and the web disassembler. The second problem was that the program seems to relocate again. Stepping through until it jumps to the next spot, I figured I could just generate another dump when the program was fully unpacked. I generated a new binary, stepped through that, generated another, stepped through that&amp;hellip; I did this twelve times before I figured out that there was probably no end in sight. Time to bust out the tooling.&lt;/p&gt;
&lt;p&gt;I found a &lt;a href=&#34;https://github.com/cemeyer/msp430-emu-uctf&#34;&gt;MSP430 emulator&lt;/a&gt;, specifically one that implements all the idiosyncrasies and syscalls of the Microcorruption MSP430. I could run the original dumped rom through this and generate a trace, then I could use another &lt;a href=&#34;https://github.com/Cixelyn/msp430-trace-disassembler&#34;&gt;python script&lt;/a&gt; to disassemble the trace. Problem: the trace was over half a million instructions, and since it&amp;rsquo;s just a disassembly listing, I had to look at it linearly.&lt;/p&gt;
&lt;p&gt;Figuring that this was a multi-stage unpacker, I had another idea: I would modify the emulator to write every executed instruction to a binary file, at the address of its PC. The goal being to end up with a rom that has each stage of the unpacker present. Since I was not committing writes to the file, but instead just what was executed, I would not wipe out old stages. A simple change to the emulator to create a sparse file, then for each instruction executed, seek to the PC, and write the opcode bytes to the file accomplished this goal.&lt;/p&gt;
&lt;p&gt;Now with this full ROM I could get to reverse engineering the code that matters. Popping the binary into IDA showed an unpacking stage at 0x4400 (The entry point), 0x5000, and 0x8000. These nice addresses led me to figure out that my emulator always returned zero from the &lt;code&gt;rand&lt;/code&gt; syscall, definitely convenient. When running on the online debugger the stages were scattered somewhere on each of these pages.&lt;/p&gt;
&lt;p&gt;Reversing the binary was mostly straight forward in IDA, since it isn&amp;rsquo;t a linear sweep disassembler it wasn&amp;rsquo;t tricked by jumps into instructions. There were many basic blocks that apparently had no path to them, but that was because of another trick: Instead of calling a function, they would push PC, branch to the function, then pop the PC, increment it, and jump back to it, effectively returning to where it had started. IDA didn&amp;rsquo;t recognize this, but it just meant that the control flow returned to the next basic block.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;ROM:&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;00004508&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;; ---------------------------------------------------------------------------
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;ROM:&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;00004508&lt;/span&gt;                 &lt;span style=&#34;color:#a6e22e&#34;&gt;mov.w&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;R15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;R12&lt;/span&gt;)
ROM:&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;0000450&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt;                 &lt;span style=&#34;color:#66d9ef&#34;&gt;mov.w&lt;/span&gt;   &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;R10&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;+&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;R15&lt;/span&gt;
ROM:&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;0000450&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;E&lt;/span&gt;                 &lt;span style=&#34;color:#66d9ef&#34;&gt;push.w&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;PC&lt;/span&gt;
ROM:&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;00004510&lt;/span&gt;                 &lt;span style=&#34;color:#a6e22e&#34;&gt;jmp&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;loc_45BE&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;; Basically a call
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ROM&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00004512&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;; ---------------------------------------------------------------------------
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ROM&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00004512&lt;/span&gt;                 &lt;span style=&#34;color:#66d9ef&#34;&gt;mov.w&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;R15&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Ah&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;R12&lt;/span&gt;)
ROM:&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;00004516&lt;/span&gt;                 &lt;span style=&#34;color:#a6e22e&#34;&gt;mov.w&lt;/span&gt;   &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;R10&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;+&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;R15&lt;/span&gt;
ROM:&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;00004518&lt;/span&gt;                 &lt;span style=&#34;color:#a6e22e&#34;&gt;push.w&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;PC&lt;/span&gt;
ROM:&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;0000451&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;                 &lt;span style=&#34;color:#66d9ef&#34;&gt;jmp&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;loc_45BE&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;; Basically a call
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;...&lt;/span&gt;
ROM:&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;0000460&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;loc_460A&lt;/span&gt;:                               &lt;span style=&#34;color:#75715e&#34;&gt;; CODE XREF: sub_4400+206↑j
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ROM&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0000460&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;A&lt;/span&gt;                 &lt;span style=&#34;color:#66d9ef&#34;&gt;pop&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;R14&lt;/span&gt;             &lt;span style=&#34;color:#75715e&#34;&gt;; Pop the PC that was pushed earlier
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ROM&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0000460&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;C&lt;/span&gt;                 &lt;span style=&#34;color:#66d9ef&#34;&gt;incd.w&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;R14&lt;/span&gt;             &lt;span style=&#34;color:#75715e&#34;&gt;; Increment it to the next instruction
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ROM&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;0000460&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;E&lt;/span&gt;                 &lt;span style=&#34;color:#66d9ef&#34;&gt;jmp&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;loc_4612&lt;/span&gt;
ROM:&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;0000460&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;E&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;; ---------------------------------------------------------------------------
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ROM&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00004610&lt;/span&gt;                 &lt;span style=&#34;color:#66d9ef&#34;&gt;.byte&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
ROM:&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;00004611&lt;/span&gt;                 &lt;span style=&#34;color:#a6e22e&#34;&gt;.byte&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
ROM:&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;00004612&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;; ---------------------------------------------------------------------------
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;ROM:&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;00004612&lt;/span&gt;
ROM:&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;00004612&lt;/span&gt; loc_4612:                               &lt;span style=&#34;color:#75715e&#34;&gt;; CODE XREF: sub_4400+20E↑j
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;ROM:&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;00004612&lt;/span&gt;                 &lt;span style=&#34;color:#a6e22e&#34;&gt;br&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;R14&lt;/span&gt;             &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Return&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Reversing these three &amp;lsquo;unpackers&amp;rsquo; showed about the same thing: It would copy some bytes to a random location, decrypt them, and then ultimately jump to them, then finally return and wipe out the instructions - Lucky for me I could see these ephemeral instructions because, remember, I only write &lt;em&gt;executed&lt;/em&gt; bytes to the rom file, not written bytes. Whenever a stage of the unpacker was done, it would jump to &lt;code&gt;eXXX&lt;/code&gt;, where XXX is &lt;code&gt;rand &amp;amp; 0xFFE&lt;/code&gt;. Because the emulator always returned 0 from the &lt;code&gt;rand&lt;/code&gt; syscall, this was always exactly &lt;code&gt;0xe000&lt;/code&gt;. That meant that the few instructions at 0xe000 weere just the &lt;em&gt;last&lt;/em&gt; few that executed, and I was missing the actual code.&lt;/p&gt;
&lt;p&gt;Taking a step back, I realized that everything I had reversed was only the unpacked. There was no hint of the prompt or the password validation. Staring at this for some time it hit me: This isn&amp;rsquo;t an unpacker, it&amp;rsquo;s more of a VM! A few instructions are unpacked, jumped to, wiped out, and then this is repeated. &lt;em&gt;Everything&lt;/em&gt; that mattered was executed at 0xeXXX.&lt;/p&gt;
&lt;p&gt;Back to the emulator, I made another modification that prepended every opcode trace with the address it executes at, and then I modified the disassembler to account for this and print the line with the PC preceding it. I then filtered the output to only keep any address that started with 0xeXXX.&lt;/p&gt;
&lt;p&gt;Boom! Down from half a million instructions to a few hundred! I can reverse this.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;e000&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;E1C&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3182&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#8, SP
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;e002&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;E1D&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;C40&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;EA49&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mov&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#0x49ea, R12
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;e006&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;E1E&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;004&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;D&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;br&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;R13&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;e4c6&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;A5B5&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3240&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0080&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mov&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#0x8000, SR
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;e4ca&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;A5B6&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;C40&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;CA48&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mov&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#0x48ca, R12
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;e4ce&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;A5B7&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;004&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;D&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;br&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;R13&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;e000&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;AD4D&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;B140&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5700&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0600&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mov&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#0x57, 0x6(SP)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;e006&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;AD4E&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;C40&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8448&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mov&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#0x4884, R12
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;e00a&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;AD4F&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;004&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;D&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;br&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;R13&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;e000&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;B4E6&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;B012&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;call&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;#0x10
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;e004&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;B4E8&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;C40&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;584&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;D&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mov&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#0x4d58, R12
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;e008&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;B4E9&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;004&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;D&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;br&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;R13&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;e000&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;BC7F&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;B140&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6800&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0600&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mov&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#0x68, 0x6(SP)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;e006&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;BC80&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;C40&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;C45&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mov&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#0x459c, R12
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;e00a&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;BC81&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;004&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;D&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;br&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;R13&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;rsquo;s more fucking like it. The &lt;code&gt;br R13&lt;/code&gt; is just the return to the unpacker, and the &lt;code&gt;mov #0xXXXX, R12&lt;/code&gt; was just another address used for unpacking. Filter them out!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;e000&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;E1C&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3182&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#8, SP
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;e4c6&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;A5B5&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3240&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0080&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mov&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#0x8000, SR
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;e000&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;AD4D&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;B140&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5700&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0600&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mov&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#0x57, 0x6(SP)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;e000&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;B4E6&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;B012&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;call&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;#0x10
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;e000&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;BC7F&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;B140&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6800&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0600&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mov&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#0x68, 0x6(SP)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;e000&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;C418&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;B012&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;call&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;#0x10
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;e000&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;CBB1&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;B140&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6100&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0600&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mov&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#0x61, 0x6(SP)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;e000&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;D34A&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;B012&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;call&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;#0x10
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;e000&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;DAE3&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;B140&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7400&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0600&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mov&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#0x74, 0x6(SP)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;e000&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;E27C&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;B012&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;call&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;#0x10
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;e000&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;EA15&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;B140&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2700&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0600&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mov&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#0x27, 0x6(SP)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;e000&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;F1AE&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;B012&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;call&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;#0x10
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;e000&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;F947&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;B140&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7300&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0600&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mov&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#0x73, 0x6(SP)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;e000&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;E0&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;B012&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;call&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;#0x10
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;e000&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;10879&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;B140&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2000&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0600&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mov&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#0x20, 0x6(SP)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;e000&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;11012&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;B012&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;call&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;#0x10
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;e000&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;117&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;AB&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;B140&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7400&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0600&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mov&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#0x74, 0x6(SP)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;e000&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;F44&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;B012&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;call&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;#0x10
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;e000&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;126&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;DD&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;B140&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6800&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0600&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mov&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#0x68, 0x6(SP)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;e000&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;E76&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;B012&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;call&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;#0x10
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What we are seeing here is the prompt &amp;ldquo;What&amp;rsquo;s the password?&amp;rdquo; being printed, one character at a time. After this is the validation:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;B140&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0026&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0600&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mov&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#0x2600, 0x6(SP)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;B140&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0001&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0800&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mov&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#0x100, 0x8(SP)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3240&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0082&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;mov&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#0x8200, SR
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;B012&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;call&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;#0x10
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3540&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0026&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;mov&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#0x2600, R5
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0643&lt;/span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;clr&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;R6&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;rep&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;eats&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;times&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;2455&lt;/span&gt;           &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;R5&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;R4&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;8410&lt;/span&gt;           &lt;span style=&#34;color:#a6e22e&#34;&gt;swpb&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;R4&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;36&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;E5&lt;/span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;xor&lt;/span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;R5&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;+&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;R6&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;06&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;E4&lt;/span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;xor&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;R4&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;R6&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;04&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;E6&lt;/span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;xor&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;R6&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;R4&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;06&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;E4&lt;/span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;xor&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;R4&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;R6&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;8593&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;0000&lt;/span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;tst&lt;/span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;R5&lt;/span&gt;)
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;0742&lt;/span&gt;           &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;SR&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;R7&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;27&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;F3&lt;/span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;and&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#2, R7
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0711&lt;/span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;rra&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;R7&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;17&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;E3&lt;/span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;xor&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#1, R7
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8710&lt;/span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;swpb&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;R7&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;0711&lt;/span&gt;           &lt;span style=&#34;color:#a6e22e&#34;&gt;rra&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;R7&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;8711&lt;/span&gt;           &lt;span style=&#34;color:#a6e22e&#34;&gt;sxt&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;R7&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;8710&lt;/span&gt;           &lt;span style=&#34;color:#a6e22e&#34;&gt;swpb&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;R7&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;8711&lt;/span&gt;           &lt;span style=&#34;color:#a6e22e&#34;&gt;sxt&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;R7&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;3840&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;184&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;mov&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#0x4b18, R8
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;08&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;F7&lt;/span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;and&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;R7&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;R8&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;37&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;E3&lt;/span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;xor&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#-1, R7
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;F0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AA47&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;and&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#0x47aa, R7
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0857&lt;/span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;add&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;R7&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;R8&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;0743&lt;/span&gt;           &lt;span style=&#34;color:#a6e22e&#34;&gt;clr&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;R7&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;3490&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;B1FE&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;cmp&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#0xfeb1, R4
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0742&lt;/span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;mov&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;SR&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;R7&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;0443&lt;/span&gt;           &lt;span style=&#34;color:#a6e22e&#34;&gt;clr&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;R4&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;3690&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;9892&lt;/span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;cmp&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#0x9298, R6
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;07&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;F2&lt;/span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;and&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;SR&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;R7&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;0643&lt;/span&gt;           &lt;span style=&#34;color:#a6e22e&#34;&gt;clr&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;R6&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;0711&lt;/span&gt;           &lt;span style=&#34;color:#a6e22e&#34;&gt;rra&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;R7&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;17&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;E3&lt;/span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;xor&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#1, R7
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8710&lt;/span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;swpb&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;R7&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;0711&lt;/span&gt;           &lt;span style=&#34;color:#a6e22e&#34;&gt;rra&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;R7&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;0711&lt;/span&gt;           &lt;span style=&#34;color:#a6e22e&#34;&gt;rra&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;R7&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;0711&lt;/span&gt;           &lt;span style=&#34;color:#a6e22e&#34;&gt;rra&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;R7&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;0711&lt;/span&gt;           &lt;span style=&#34;color:#a6e22e&#34;&gt;rra&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;R7&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;02&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;D7&lt;/span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;bis&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;R7&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;SR&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using this filtered output, I got the original bytes and converted them back to a binary that was only 732 bytes and running this in the emulator worked! That confirmed that I filtered it down to exactly what I needed.
Looking at this tiny assembly it&amp;rsquo;s easy to see what&amp;rsquo;s happening: Two bytes of the input are checked at a time, and they are mixed into R4, R6, and R8. After the loop runs eight times, the value of R4 and R6 is checked, and then the status register is copied to R7, rotated around, and written back to SR. This is why the CPU was halting: The SR was set to some bogus value. We want 0x7F00 in R7 on the last instruction. The comparison to 0xfeb1 sets the status bits, and to preserve them they have to survive the AND with the status register after the comparison to 0x9298. This means that we need R4 and R6 to equal these values after the loop, meaning everything to do with R7 and R8 in the loop is trash!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;B140&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0026&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0600&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mov&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#0x2600, 0x6(SP)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;B140&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0001&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0800&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mov&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#0x100, 0x8(SP)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3240&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0082&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;mov&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#0x8200, SR
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;B012&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;call&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;#0x10
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3540&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0026&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;mov&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#0x2600, R5
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0643&lt;/span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;clr&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;R6&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;rep&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;eats&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;times&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;2455&lt;/span&gt;           &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;R5&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;R4&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;8410&lt;/span&gt;           &lt;span style=&#34;color:#a6e22e&#34;&gt;swpb&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;R4&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;36&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;E5&lt;/span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;xor&lt;/span&gt;    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;R5&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;+&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;R6&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;06&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;E4&lt;/span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;xor&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;R4&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;R6&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;04&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;E6&lt;/span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;xor&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;R6&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;R4&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;06&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;E4&lt;/span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;xor&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;R4&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;R6&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;3490&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;B1FE&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;cmp&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#0xfeb1, R4
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0742&lt;/span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;mov&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;SR&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;R7&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;0443&lt;/span&gt;           &lt;span style=&#34;color:#a6e22e&#34;&gt;clr&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;R4&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;3690&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;9892&lt;/span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;cmp&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#0x9298, R6
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;07&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;F2&lt;/span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;and&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;SR&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;R7&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;rsquo;s very reasonable. I was able to convert this to python easily:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;r4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
r6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;):
    r4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (r4 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; u16(s[i&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:i&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xFFFF&lt;/span&gt;)
    r4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; swpb(r4)
    r6 &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; u16(s[i&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:i&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;])
    r4, r6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; r6, r4&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I tried bruteforcing this, but with a 16 byte input this was not happening. Time for z3!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;password &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [BitVec(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s0&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;), BitVec(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;), BitVec(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s2&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;), BitVec(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s3&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;),
            BitVec(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s4&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;), BitVec(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s5&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;), BitVec(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s6&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;), BitVec(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s7&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)]
r4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BitVecVal(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)
r6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BitVecVal(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;):
    r4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; r4 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; password[i]
    r4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; RotateRight(r4, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)
    r6 &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; password[i]
    r4, r6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; r6, r4

solver &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Solver()

&lt;span style=&#34;color:#75715e&#34;&gt;# Add constraints&lt;/span&gt;
solver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(r4 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xfeb1&lt;/span&gt;)
solver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(r6 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9298&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# Solve&lt;/span&gt;
solver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;check()
m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; solver&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;model()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then simply converting the solution from 8 16-bit integers to a byte string, and submitting that, I was treated to that delicious win.&lt;/p&gt;
- https://grazfather.github.io/posts/2018-11-24-microcorruption-hollywood/ - </description>
        </item>
    
    
    
        <item>
        <title>Plaid CTF 2018 coconut</title>
        <link>https://grazfather.github.io/posts/2018-05-06-plaid2018-coconut/</link>
        <pubDate>Sun, 06 May 2018 12:00:00 +0000</pubDate>
        
        <guid>https://grazfather.github.io/posts/2018-05-06-plaid2018-coconut/</guid>
        <description>Grazfather https://grazfather.github.io/posts/2018-05-06-plaid2018-coconut/ -&lt;p&gt;First we&amp;rsquo;re given an address to connect to. Upon connecting with &lt;code&gt;nc&lt;/code&gt; we see a bunch of (AT&amp;amp;T 🤮) x86_64 assembly, and we are told to delete lines to get under a certain threshold without changing the return value. Easy enough! I backtrack from the last write to eax and trace back until I see its final immediate value being written to the stack. Submit those lines, easy flag.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s look at an example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;    .globl    myfunction
&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;    myfunction:
&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;    pushq    %rbp
&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;    movq    %rsp, %rbp
&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;    movl    $-872808834, -20&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%rbp&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;    movl    $1162927757, -16&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%rbp&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;    movl    -16&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%rbp&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, %eax
&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;    movl    -20&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%rbp&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, %edx
&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;    andl    %edx, %eax
&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;    movl    %eax, -12&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%rbp&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;    movl    -20&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%rbp&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, %eax
&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;    movl    %eax, -8&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%rbp&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;    movl    -16&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%rbp&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, %eax
&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;    movl    -8&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%rbp&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, %edx
&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;    andl    %edx, %eax
&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;    movl    %eax, -4&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%rbp&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;    movl    -4&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%rbp&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, %eax
&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;    popq    %rbp
&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;    ret&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;rsquo;s walk through it:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We see that eax is last written to on line 17, and it gets its value from -4(%rbp), which was written to from line 16, which gets its value from eax. That&amp;rsquo;s redundant, and we know we don&amp;rsquo;t need those.&lt;/li&gt;
&lt;li&gt;Line 15 is now the latest line that writes eax, and it gets its value from edx &lt;em&gt;and&lt;/em&gt; from a previous value of eax (since it&amp;rsquo;s an &lt;code&gt;and&lt;/code&gt; instruction). We have to fork here and track both variables.&lt;/li&gt;
&lt;li&gt;Following edx, we see it&amp;rsquo;s copied from -8(%rbp) on line 14.&lt;/li&gt;
&lt;li&gt;-8(%rbp) is copied from eax on line 12&lt;/li&gt;
&lt;li&gt;eax was last written to from -20(%rbp) on line 11&lt;/li&gt;
&lt;li&gt;-20(%rbp) was copied &lt;em&gt;from&lt;/em&gt; on line 8, but we don&amp;rsquo;t care about that. It was last written &lt;em&gt;to&lt;/em&gt; on line 5, and it was an immediate value, so we know we&amp;rsquo;re done this path.&lt;/li&gt;
&lt;li&gt;Going back to line 15, we track eax writes. eax was last written to on line 13, using the value at -16(%rbp).&lt;/li&gt;
&lt;li&gt;-16(%rbp) was last written to on line 6, and it&amp;rsquo;s an immediate, so we&amp;rsquo;re done.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now we obviously need the directives (lines 1 and 2), plus the stack setup (lines 3 and 4), plus the return (line 19). Other than these lines, and the lines mentioned above, we can delete everything else! If we submit these line numbers, we should get a flag.&lt;/p&gt;
&lt;p&gt;Congrats! Your flag is PCTF{iN3ffic1eent__A5m_K1ll5}&lt;/p&gt;
&lt;p&gt;Now on to the next one. This one, as expected, is more of the same. Connecting a few times I see that the assembly listing provided changes. @uafio and I try to download all of them and start working on them manually. In 1000 iterations we only found 100 unique assembly listings&amp;hellip; That&amp;rsquo;s reasonable. While working through, though, the sense that this isn&amp;rsquo;t it won&amp;rsquo;t leave me. We&amp;rsquo;ll have to automate this.&lt;/p&gt;
&lt;p&gt;Now I know in theory how this is done. I&amp;rsquo;ve read on &lt;a href=&#34;https://en.wikipedia.org/wiki/Static_single_assignment_form&#34;&gt;Static single assignment form&lt;/a&gt; before. The idea is to re-version every variable every time it&amp;rsquo;s assigned to, and track which version of which variable was used in determining its current value.&lt;/p&gt;
&lt;p&gt;So I start writing code!&lt;/p&gt;
&lt;p&gt;There are many ways about this. I could use something like &lt;a href=&#34;http://www.capstone-engine.org/&#34;&gt;Capstone engine&lt;/a&gt; or binja&amp;rsquo;s new SSA form, but truly I don&amp;rsquo;t think I&amp;rsquo;m going to solve this problem, I just want to understand SSA (plus my binja license has expired and I don&amp;rsquo;t have the latest updates). I decide to parse the instructions using good &amp;lsquo;ol vanilla python. I write some typical fetching/parsing code with &lt;code&gt;pwntools&lt;/code&gt;, and think about how to track this.&lt;/p&gt;
&lt;p&gt;From all the challenges I&amp;rsquo;ve collected, there are only a handful of unique instructions. Mostly &lt;code&gt;mov&lt;/code&gt;s and arithmetic. All memory accesses are relative to rbp. All register access, other than rbp, is in the extended (32 bit) form. I decide to make it simple: Each register and each offset from rbp is a variable. I can use the name as a key in a dictionary. I can keep track of each version, and for each version, I can track which other variable(s) were used. This gives me a dictionary with a list (or dict) of versions, where for each version I keep a list of which variables were used to determine the new value. I also need to keep track of which line this version was created, so that if the version is relevant, I can make sure to keep the line it shows up on. Here is a nice short sample (using the same code listing as above):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;+&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Opening connection to coconut.chal.pwning.xxx on port 6817: Done
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;    .globl    myfunction
&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;    myfunction:
&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;    pushq    %rbp
&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;    movq    %rsp, %rbp
&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;    movl    $-872808834, -20&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%rbp&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;    movl    $1162927757, -16&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%rbp&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;    movl    -16&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%rbp&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, %eax
&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;    movl    -20&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%rbp&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, %edx
&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;    andl    %edx, %eax
&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;    movl    %eax, -12&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%rbp&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;    movl    -20&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%rbp&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, %eax
&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;    movl    %eax, -8&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%rbp&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;    movl    -16&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%rbp&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, %eax
&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;    movl    -8&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%rbp&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, %edx
&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;    andl    %edx, %eax
&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;    movl    %eax, -4&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%rbp&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;    movl    -4&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;%rbp&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, %eax
&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;    popq    %rbp
&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;    ret
&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%eax&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;1: &lt;span style=&#34;color:#f92672&#34;&gt;[(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;[rbp-16]&amp;#39;&lt;/span&gt;, 1, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;7&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)]&lt;/span&gt;,
          2: &lt;span style=&#34;color:#f92672&#34;&gt;[(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%eax&amp;#39;&lt;/span&gt;, 1, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;9&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%edx&amp;#39;&lt;/span&gt;, 1, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;9&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)]&lt;/span&gt;,
          3: &lt;span style=&#34;color:#f92672&#34;&gt;[(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;[rbp-20]&amp;#39;&lt;/span&gt;, 1, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;11&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)]&lt;/span&gt;,
          4: &lt;span style=&#34;color:#f92672&#34;&gt;[(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;[rbp-16]&amp;#39;&lt;/span&gt;, 1, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;13&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)]&lt;/span&gt;,
          5: &lt;span style=&#34;color:#f92672&#34;&gt;[(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%eax&amp;#39;&lt;/span&gt;, 4, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;15&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%edx&amp;#39;&lt;/span&gt;, 2, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;15&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)]&lt;/span&gt;,
          6: &lt;span style=&#34;color:#f92672&#34;&gt;[(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;[rbp-4]&amp;#39;&lt;/span&gt;, 1, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;17&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)]&lt;/span&gt;,
          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;last&amp;#39;&lt;/span&gt;: 6&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,
 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%edx&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;1: &lt;span style=&#34;color:#f92672&#34;&gt;[(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;[rbp-20]&amp;#39;&lt;/span&gt;, 1, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;8&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)]&lt;/span&gt;, 2: &lt;span style=&#34;color:#f92672&#34;&gt;[(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;[rbp-8]&amp;#39;&lt;/span&gt;, 1, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;14&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)]&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;last&amp;#39;&lt;/span&gt;: 2&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,
 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;[rbp-12]&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;1: &lt;span style=&#34;color:#f92672&#34;&gt;[(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%eax&amp;#39;&lt;/span&gt;, 2, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;10&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)]&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;last&amp;#39;&lt;/span&gt;: 1&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,
 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;[rbp-16]&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;1: &lt;span style=&#34;color:#f92672&#34;&gt;[(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;$1162927757&amp;#39;&lt;/span&gt;, 0, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;6&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)]&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;last&amp;#39;&lt;/span&gt;: 1&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,
 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;[rbp-20]&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;1: &lt;span style=&#34;color:#f92672&#34;&gt;[(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;$-872808834&amp;#39;&lt;/span&gt;, 0, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;5&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)]&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;last&amp;#39;&lt;/span&gt;: 1&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,
 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;[rbp-4]&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;1: &lt;span style=&#34;color:#f92672&#34;&gt;[(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%eax&amp;#39;&lt;/span&gt;, 5, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;16&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)]&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;last&amp;#39;&lt;/span&gt;: 1&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,
 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;[rbp-8]&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;1: &lt;span style=&#34;color:#f92672&#34;&gt;[(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%eax&amp;#39;&lt;/span&gt;, 3, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;12&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)]&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;last&amp;#39;&lt;/span&gt;: 1&lt;span style=&#34;color:#f92672&#34;&gt;}}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We see that there are six version of eax. Looking at the sixth version, we see that it used &lt;code&gt;[rbp-4]&lt;/code&gt; to determine its new value (and not an old version of itself!), it used version 1 of that variable, and that happened on line 17. Looking at line 17 we can clearly see this is the case! Now going to the only version of &lt;code&gt;[rbp-4]&lt;/code&gt;, we see that it was written from a previous value of eax! We can track this back until we fully exhaust all paths. If we keep track of the lines these occurred on, then we know all of the lines that matter! The astute reader will notice that tracking back in this way is not necessarily optimal: Looking at the last two versions of eax, we see that it&amp;rsquo;s a useless write to &lt;code&gt;[rbp-4]&lt;/code&gt;, since it&amp;rsquo;s immediately read back and we don&amp;rsquo;t prune this! Luckily, though, that was not an issue, as my tactic seems to always prune enough to get within the required threshold.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s some pseudo code for how to build this dictionary:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; code:
    get src(s), dest, &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; line number &lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; line text
    newver &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lastver &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    update dest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lastver
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; each src:
        dest[newver]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;prereqs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(src)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The back-tracking algorithm is a simple &lt;a href=&#34;https://en.wikipedia.org/wiki/Depth-first_search&#34;&gt;DFS&lt;/a&gt;. We track all the versions of all variables we need to visit in a queue, starting with the last version of eax (since this is the one that acts as the return value). From this first var we enqueue all variables that were used to determine this value, and repeat until this queue is empty. When we hit an immediate value, which has no prereq, we&amp;rsquo;ve exhausted this particular path. When the queue is completely empty, we&amp;rsquo;re built up a nice set of line numbers that are required to build this path, and we simply tell the server to delete everything else! This is exactly how I manually loved the first listing above!&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s some more pseudocode:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;queue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [last version of eax]
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; there are items &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; the queue:
    current &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; queue&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dequeue()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; each var that &lt;span style=&#34;color:#f92672&#34;&gt;is&lt;/span&gt; used &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; cur:
        queue&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;enqueue(var)
    mark current &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; important&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At this point my code was miraculously solving a few rounds, but I hit a snag. Turns out every five rounds they add a few instructions, and my original naive code only checked for a &lt;code&gt;mov&lt;/code&gt;, &lt;code&gt;and&lt;/code&gt;, and maybe a few others. While the debugging wasn&amp;rsquo;t super fun, it mostly just involved finding the problematic instruction and making sure we properly handle it, meaning we correctly parse out the destination and sources, and revision the destination. There were instructions like &lt;code&gt;imull&lt;/code&gt; which has a 3-op form, and &lt;code&gt;leal&lt;/code&gt;, which has what looks like a memory access but actually isn&amp;rsquo;t, these needed special handling.&lt;/p&gt;
&lt;p&gt;With eight hours to go in the CTF my brain was dying and I still had a bug I could not figure out. My code was only passing about 15 rounds, and I had no idea how many total were needed to get the flag. I made the wise decision to go to bed.&lt;/p&gt;
&lt;p&gt;I woke up again after seven hours, and with a clearer head (and a revealing question from @vakzz) I was able to spot my bug! For certain instructions, e.g. &lt;code&gt;xor&lt;/code&gt;, the destination is &lt;em&gt;also&lt;/em&gt; a source. I needed to make sure that new version of some variable marked the old version as a prereq! I had this correct for &lt;code&gt;and&lt;/code&gt; but not for others. Advice: If you&amp;rsquo;re tired and batting your head against a problem, take a nap.&lt;/p&gt;
&lt;p&gt;With this fixed, it was just a matter of cleaning my script up to make it reliable, and making sure to get the flag when the server finally spits it out.&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t judge my code too much! I hope it&amp;rsquo;s easy to understand.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sys
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; re
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pprint &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pprint

&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pwn &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;

vars &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dummyremote&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;recv&lt;/span&gt;(self): &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;recvline&lt;/span&gt;(self): &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;recvuntil&lt;/span&gt;(self, s, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kwargs): &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(self, s): &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; s
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sendline&lt;/span&gt;(self, s): &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; s
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;interactive&lt;/span&gt;(self): &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
    r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; remote(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;coconut.chal.pwning.xxx&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6817&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
    r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dummyremote()

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_newver&lt;/span&gt;(var):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; dest &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; vars:
        vars[dest] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;last&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        }
        newver &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        newver &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vars[dest][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;last&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        vars[dest][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;last&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; newver
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; newver

buf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
success &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; True:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;# Add random arg to connect to remote&lt;/span&gt;
        r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Function to optimize:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)

        challenge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt;&amp;lt;EOF&amp;gt;&amp;gt;&amp;gt;&amp;#39;&lt;/span&gt;, drop&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
        r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Note:&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bla&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f:
            challenge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()

    &lt;span style=&#34;color:#75715e&#34;&gt;# print challenge&lt;/span&gt;
    code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; challenge&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)

    seenlines &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ins &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; code:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ins &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
        line, ins &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ins&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rstrip()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        &lt;span style=&#34;color:#75715e&#34;&gt;# Prologue instructions must remain&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;leave&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; ins &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;movq&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; ins &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;globl&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; ins &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;myfunction&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; ins &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;push&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; ins &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pop&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; ins &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ret&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; ins &lt;span style=&#34;color:#f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;subq&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; ins:
            seenlines&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(line) &lt;span style=&#34;color:#75715e&#34;&gt;# So that we do not remove prologue/epilogue&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;

        op, args &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ins&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        args &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)

        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
            src, dest &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;# unary ops, where src is dest&lt;/span&gt;
            dest &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; args
            src &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dest

        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;match(&lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-?\d+\(&amp;#34;&lt;/span&gt;, dest): &lt;span style=&#34;color:#75715e&#34;&gt;# Mem access, assumed rbp offset&lt;/span&gt;
            dest &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[rbp&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;dest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(&amp;#34;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;]&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; re&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;match(&lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-?\d+\(&amp;#34;&lt;/span&gt;, src):
            src &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[rbp&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;src&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(&amp;#34;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;]&amp;#34;&lt;/span&gt;

        newver &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_newver(dest)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;movl&amp;#34;&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; src &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; vars:
                vars[dest][newver] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [(src, vars[src][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;last&amp;#34;&lt;/span&gt;], line)]
            &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; src:
                vars[dest][newver] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [(src, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, line)]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; op &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;xorl&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;andl&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;imull&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;addl&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;orl&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;subl&amp;#34;&lt;/span&gt;}:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; dest: &lt;span style=&#34;color:#75715e&#34;&gt;# A 3-arg imull&lt;/span&gt;
                dest &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dest&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split()[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
                newver &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_newver(dest) &lt;span style=&#34;color:#75715e&#34;&gt;# The extra newver above, versioning a bogus var is harmless&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;# Assuming always the same two regs for src and dest1&lt;/span&gt;
                vars[dest][newver] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [(dest, vars[dest][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;last&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, line), (src, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, line)]
            &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; src:
                vars[dest][newver] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [(dest, vars[dest][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;last&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, line), (src, vars[src][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;last&amp;#34;&lt;/span&gt;], line)]
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                vars[dest][newver]  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [(dest, vars[dest][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;last&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, line), (src, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, line)]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; op &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;notl&amp;#34;&lt;/span&gt;}:
            vars[src][newver]  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [(dest, vars[dest][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;last&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, line)]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; op &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;leal&amp;#34;&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
                &lt;span style=&#34;color:#75715e&#34;&gt;# leal (%rdx,%rax)&lt;/span&gt;
                op1, op2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; src&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(%&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%&amp;#34;&lt;/span&gt;)
                op1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%e&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; op1[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:] &lt;span style=&#34;color:#75715e&#34;&gt;# rdx -&amp;gt; edx&lt;/span&gt;
                op2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%e&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; op2[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:]
                vars[dest][newver] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [(op1, vars[op1][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;last&amp;#34;&lt;/span&gt;], line), (op2, vars[op2][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;last&amp;#34;&lt;/span&gt;], line)]
            &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt;:
                &lt;span style=&#34;color:#75715e&#34;&gt;# leal 1(%rax)&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;# HACK: The src is already trashed by the regex looking for mem access. Just assume eax&lt;/span&gt;
                src &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%e&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ax&amp;#34;&lt;/span&gt;
                vars[dest][newver] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [(src, vars[src][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;last&amp;#34;&lt;/span&gt;], line)]
        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; ins
            &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;UNKNOWN OPCODE&amp;#34;&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;# pprint(vars)&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# log.info(&amp;#34;Done SSA&amp;#34;)&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;# Now track back from the newest eax&lt;/span&gt;
    last &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vars[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%e&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ax&amp;#34;&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;last&amp;#34;&lt;/span&gt;]
    cur, cur_ver, line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vars[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%e&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ax&amp;#34;&lt;/span&gt;][last][&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
    &lt;span style=&#34;color:#75715e&#34;&gt;# print cur, cur_ver, line&lt;/span&gt;
    needed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [(cur, cur_ver, line)]
    seen &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {(cur, cur_ver, line)}

    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; needed:
        &lt;span style=&#34;color:#75715e&#34;&gt;# Pop from needed&lt;/span&gt;
        cur, cur_ver, line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; needed[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
        needed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; needed[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:]

        &lt;span style=&#34;color:#75715e&#34;&gt;# Queue up its prereqs&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; op &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; vars[cur][cur_ver]:
            cur, cur_ver, line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; op
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (cur, cur_ver, line) &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; seen:
                seen&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add((cur, cur_ver, line))
                &lt;span style=&#34;color:#75715e&#34;&gt;# print cur, cur_ver, line&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; cur: &lt;span style=&#34;color:#75715e&#34;&gt;# Immediate&lt;/span&gt;
                    needed&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append((cur, cur_ver, line))

    &lt;span style=&#34;color:#75715e&#34;&gt;# log.info(&amp;#34;Done backtrace&amp;#34;)&lt;/span&gt;

    seenlines &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; seenlines&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;union({_[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; seen})
    loc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; code[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;][:]
    i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    first &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None
    prev &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len(loc):
        start &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(loc[i]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; str(start) &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; seenlines:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len(loc) &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; loc[i]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; seenlines:
                end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(loc[i]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])
                i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; start &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; end:
                r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{}-{}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(start, end))
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(str(start))
        i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#&amp;#34;&lt;/span&gt;)

    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Running...&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
    buf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Result:&amp;#34;&lt;/span&gt;, timeout&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    buf &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rstrip()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Success&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; buf:
        success &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#75715e&#34;&gt;# For post-mortem&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bla&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;w&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f:
            f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(challenge)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; buf &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(success)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; success &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recv()
        r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Congrats! Your flag is PCTF{Y0u_Just_Imp!em3nt3D_A_LLVM_pass!}&lt;/p&gt;
- https://grazfather.github.io/posts/2018-05-06-plaid2018-coconut/ - </description>
        </item>
    
    
    
        <item>
        <title>Plaid CTF 2018 macsh</title>
        <link>https://grazfather.github.io/posts/2018-05-06-plaid2018-macsh/</link>
        <pubDate>Sun, 06 May 2018 12:00:00 +0000</pubDate>
        
        <guid>https://grazfather.github.io/posts/2018-05-06-plaid2018-macsh/</guid>
        <description>Grazfather https://grazfather.github.io/posts/2018-05-06-plaid2018-macsh/ -&lt;p&gt;For this challenge we&amp;rsquo;re given a network address where we can access what looks like a simple shell, and the source code to this shell, which is thankfully python code.&lt;/p&gt;
&lt;p&gt;Looking at &lt;em&gt;macsh.py&lt;/em&gt; we see a set of commands, some of which are privileged. We can &lt;code&gt;echo&lt;/code&gt; without privilege, and &lt;code&gt;tag&lt;/code&gt;. What&amp;rsquo;s &lt;code&gt;tag&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;Looking at the tag implementation, it looks like it creates and prints the MAC of the specified args, &lt;strong&gt;as long as the args don&amp;rsquo;t start with a priveleged command&lt;/strong&gt;. Looking at the command parsing, it looks like commands are expected to come in the format &lt;code&gt;TAG&amp;lt;|&amp;gt;COMMAND&lt;/code&gt;, and the command will not execute unless the tag matches the mac of the command. The &lt;code&gt;tag&lt;/code&gt; command, however, skips the check.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ nc macsh.chal.pwning.xxx &lt;span style=&#34;color:#ae81ff&#34;&gt;64791&lt;/span&gt;
|$|&amp;gt; &amp;lt;|&amp;gt;tag hello world
3c3ddeeb2e5c6d7f06abc155690e2ec5
|$|&amp;gt; &amp;lt;|&amp;gt;tag cat flag
macsh: tag: Permission denied&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The goal here is obvious: Take advantage of &lt;code&gt;tag&lt;/code&gt; to get the MAC of a privileged command, so that I can find and eventually dump the flag file. Let&amp;rsquo;s see how the crypto is implemented.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fmac&lt;/span&gt;(k0, k1, m):
    C &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; AES&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(k1, AES&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;MODE_ECB)
    bs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [C&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encrypt(xor(b, f(k0, i))) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i,b &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(to_blocks(m))]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i, blocks &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(zip(bs, to_blocks(m))):
        cb, b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; blocks
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; reduce(xor, bs, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; N)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ECB mode! That means that each block is encrypted individually! The order and the neighbouring blocks don&amp;rsquo;t matter. This is easy: Just tag something that has a privileged command within its own block! Then snip out that part, and provide it on its own.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s a snag here: tag gives you a MAC, not the encryption of each block. Their mac combines all of the encrypted blocks by &lt;code&gt;xor&lt;/code&gt;ing them together. We can easily get rid of this by taking advantage of this property of xor:&lt;/p&gt;
&lt;p&gt;A ^ A = 0&lt;/p&gt;
&lt;p&gt;or rather&lt;/p&gt;
&lt;p&gt;A ^ B ^ A = B&lt;/p&gt;
&lt;p&gt;What this means is that if we can get the tag of a good block (A), and then the tag of the same good block plus a privileged block (A^B) we can xor these together and end up with the tag of just the privileged block!&lt;/p&gt;
&lt;p&gt;I write some code to do this and&amp;hellip; fail. Time to run this locally and add some debugging prints.&lt;/p&gt;
&lt;p&gt;Notice that in the &lt;code&gt;fmac&lt;/code&gt; function there are calls to &lt;code&gt;to_blocks&lt;/code&gt;. This pads the input so that its length is a multiple of the block size (16 bytes) as also adds a padding block or two. Adding some prints we can see what&amp;rsquo;s happening:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;|$|&amp;gt; &amp;lt;|&amp;gt;tag echo hello
Blocks:
0: b&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;6563686f2068656c6c6f000000000000&amp;#39;&lt;/span&gt; -&amp;gt; b&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;eba3ae8a1a00f6db419e625a2b4802db&amp;#39;&lt;/span&gt;
1: b&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0000000000000000000a060606060606&amp;#39;&lt;/span&gt; -&amp;gt; b&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c8b571a0faf80b49439c49ea2ca1953b&amp;#39;&lt;/span&gt;
2316df2ae0f8fd9202022bb007e997e0
|$|&amp;gt; &amp;lt;|&amp;gt;tag echo aaaaaaaaaaa
Blocks:
0: b&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;6563686f206161616161616161616161&amp;#39;&lt;/span&gt; -&amp;gt; b&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1dd59512f963b859566b5dcf8aa2b8f8&amp;#39;&lt;/span&gt;
1: b&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;00000000000000000000000000000010&amp;#39;&lt;/span&gt; -&amp;gt; b&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;643600eae985916e0155e472099e8cd5&amp;#39;&lt;/span&gt;
2: b&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;10101010101010101010101010101010&amp;#39;&lt;/span&gt; -&amp;gt; b&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;383f4a034e7ad2e67b2ba196bcf9de5d&amp;#39;&lt;/span&gt;
41dcdffb5e9cfbd12c15182b3fc5ea70&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This throws a bit of a wrench in our gears: If we tag &lt;code&gt;GOOD|PRIV&lt;/code&gt;, because its length will be different than &lt;code&gt;GOOD&lt;/code&gt;, the extra blocks will not be the same, meaning we cannot just &amp;lsquo;snip out&amp;rsquo; the good part. We need the length to be the same. Let&amp;rsquo;s try that:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;|$|&amp;gt; &amp;lt;|&amp;gt;tag echo aaaaaaaaaaacat ././flag.txt
Blocks:
0: b&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;6563686f206161616161616161616161&amp;#39;&lt;/span&gt; -&amp;gt; b&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1dd59512f963b859566b5dcf8aa2b8f8&amp;#39;&lt;/span&gt;
1: b&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;636174202e2f2e2f666c61672e747874&amp;#39;&lt;/span&gt; -&amp;gt; b&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a618de00b21a086d5ebc237480139199&amp;#39;&lt;/span&gt;
2: b&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;00000000000000000000000000000020&amp;#39;&lt;/span&gt; -&amp;gt; b&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;86998fd44e998eba9d99ab42730e19f4&amp;#39;&lt;/span&gt;
3: b&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;10101010101010101010101010101010&amp;#39;&lt;/span&gt; -&amp;gt; b&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b391d29ba893e45655fdee555e9292fe&amp;#39;&lt;/span&gt;
8ec5165dad73dad8c0b33bac272da26b
|$|&amp;gt; &amp;lt;|&amp;gt;tag echo aaaaaaaaaaaBBBBBBBBBBBBBBBB
Blocks:
0: b&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;6563686f206161616161616161616161&amp;#39;&lt;/span&gt; -&amp;gt; b&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1dd59512f963b859566b5dcf8aa2b8f8&amp;#39;&lt;/span&gt;
1: b&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;42424242424242424242424242424242&amp;#39;&lt;/span&gt; -&amp;gt; b&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;10412e29cbdc69e2bba87f7128cb70fe&amp;#39;&lt;/span&gt;
2: b&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;00000000000000000000000000000020&amp;#39;&lt;/span&gt; -&amp;gt; b&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;86998fd44e998eba9d99ab42730e19f4&amp;#39;&lt;/span&gt;
3: b&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;10101010101010101010101010101010&amp;#39;&lt;/span&gt; -&amp;gt; b&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b391d29ba893e45655fdee555e9292fe&amp;#39;&lt;/span&gt;
389ce674d4b5bb5725a767a98ff5430c&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;rsquo;s more like it! Now we have A^B^PAD, A^PRIV^PAD, but we want PRIV^SPAD, where SPAD is the padding of a short block (Since sending the privileged command on its own will be three blocks instead of four). We can use a combination of short and long commands to get what we want.&lt;/p&gt;
&lt;p&gt;PRIV^SPAD = A^PAD ^ PRIV^PAD ^ A^SPAD&lt;/p&gt;
&lt;p&gt;Now the two &amp;lsquo;A&amp;rsquo; bogus commands cancel out, the two long pads cancel out, and we&amp;rsquo;re left with a privileged command with a short pad!&lt;/p&gt;
&lt;p&gt;This is where I hit another snag: When debugging I noticed that the order of the blocks matter. That&amp;rsquo;s not the ECB I know! Turns out I missed an important part of &lt;code&gt;fmac&lt;/code&gt;: &lt;code&gt;C.encrypt(xor(b, f(k0, i)))&lt;/code&gt;. What does &lt;code&gt;f&lt;/code&gt; do?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt;(k0, i):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; to_block(rot(to_int(k0), i &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; N)))

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rot&lt;/span&gt;(n, c):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; c) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; ((n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; ((&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; c) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; N &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; c))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ah! The key is being rotated by the block index! Shit! That means that the PRIV block I put at index 1 won&amp;rsquo;t be MACed with the same key at index 0! How do we solve this?&lt;/p&gt;
&lt;p&gt;If you think about this key rotation you&amp;rsquo;ll realize that there are effectively 128 versions of this key, since there are 128 bits in the key. What happens when we&amp;rsquo;re on the 129th block? The key gets rotated all the way around&amp;hellip; back to it&amp;rsquo;s original value! This means that for PRIV to work properly, I need it to be MACed in the 129th block. This is easy to do! I just need to lengthen A so that it&amp;rsquo;s 128 blocks long! The same math works out to cancel out PAD and A.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sys

&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pwn &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prompt&lt;/span&gt;():
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;|$|&amp;gt; &amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xor&lt;/span&gt;(x, y):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join([chr(ord(xe) &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; ord(ye)) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; xe,ye &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; zip(x,y)])

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;exploit&lt;/span&gt;():
    prompt()
    block &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;****************&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# Get the MAC of LONG ^ privcmd&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# privcmd =   &amp;#34;ls ././././././.&amp;#34; # Trying to find the flag&lt;/span&gt;
    privcmd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cat ././flag.txt&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# We pad 128 blocks so that privcmd is MACed with a key rotated 128 bits (back to orig)&lt;/span&gt;
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;|&amp;gt;tag &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;block&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; privcmd)
    buf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;|$|&amp;gt; &amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
    tagpl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; buf[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]

    &lt;span style=&#34;color:#75715e&#34;&gt;# Get the MAC of LONG ^ boguscmd&lt;/span&gt;
    cmd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;xxxxxxxxxxxxxxxx&amp;#34;&lt;/span&gt;
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;|&amp;gt;tag &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;block&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; cmd)
    buf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;|$|&amp;gt; &amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
    tagbl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; buf[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]

    &lt;span style=&#34;color:#75715e&#34;&gt;# Get the MAC of SHORT ^ boguscmd&lt;/span&gt;
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;|&amp;gt;tag &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; cmd)
    buf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;|$|&amp;gt; &amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
    tagbs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; buf[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]

    &lt;span style=&#34;color:#75715e&#34;&gt;# Now we want to send privcmd ^ SHORT&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# privcmd ^ SHORT = LONG ^ privcmd ^ LONG ^ boguscmd ^ SHORT ^ boguscmd&lt;/span&gt;
    tagpb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; xor(tagpl&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hex&amp;#39;&lt;/span&gt;), tagbl&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hex&amp;#39;&lt;/span&gt;))&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hex&amp;#39;&lt;/span&gt;)
    tagps &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; xor(tagpb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hex&amp;#39;&lt;/span&gt;), tagbs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hex&amp;#39;&lt;/span&gt;))&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hex&amp;#39;&lt;/span&gt;)
    goodtag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tagps
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(goodtag &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;lt;|&amp;gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;privcmd)
    log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline())
    prompt()
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;interactive()


&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;:
    cmd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;python3 macsh.py&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split()
    host, port &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;macsh.chal.pwning.xxx:64791&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
        r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; remote(host, port)
        exploit()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
        r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; process(cmd)
        exploit()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;PCTF{fmac_is_busted_use_PMAC_instead}&lt;/p&gt;
- https://grazfather.github.io/posts/2018-05-06-plaid2018-macsh/ - </description>
        </item>
    
    
    
        <item>
        <title>RHME3 Quals - Whitebox</title>
        <link>https://grazfather.github.io/posts/2017-09-03-rhme3-quals-whitebox/</link>
        <pubDate>Sun, 03 Sep 2017 12:00:00 +0000</pubDate>
        
        <guid>https://grazfather.github.io/posts/2017-09-03-rhme3-quals-whitebox/</guid>
        <description>Grazfather https://grazfather.github.io/posts/2017-09-03-rhme3-quals-whitebox/ -&lt;p&gt;Crypto is certainly not my specialty but this is an &amp;lsquo;automotive ctf&amp;rsquo;, and working in the industry it became a pride point for me to solve this.&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;re provided a binary that reads 16 bytes of input and encrypts it with a hardcoded key. It doesn&amp;rsquo;t take a lot of looking at it to recognize that it&amp;rsquo;s (probably) AES. You can, for example, provide shorter input and see that the output is 16 bytes regardless, or change only one byte and see that the entire output changes, to prove that it&amp;rsquo;s a block cipher.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s some &lt;em&gt;simple&lt;/em&gt; control flow flattening that slows down reverse engineering a little bit, but the real wrench is that the key is somehow embedded into the algorithm.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://grazfather.github.io/assets/2017-09-03-RHME3-Quals-Whitebox-encrypt-ida-graph.png&#34; alt=&#34;graph overview&#34;&gt;&lt;/p&gt;
&lt;p&gt;The way I get around the CFF is I simply set a break on the switch case dispatch dispatch and follow the first jump, and then at the end of each &amp;lsquo;case&amp;rsquo; I label the next case based on the value set in the flow flag. My buddy uafio has a great video explaining how to figure out the more intense clang CFF, so I suggest you take a look &lt;a href=&#34;https://www.youtube.com/watch?v=Tl29oPwGgYs&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once I had a basic idea for how it worked I was able to confirm the algorithm as AES by identifying certain steps outlined in the &lt;a href=&#34;https://en.wikipedia.org/wiki/Advanced_Encryption_Standard#Description_of_the_cipher&#34;&gt;algorithm&lt;/a&gt;, for example seeing ten rounds of the &lt;em&gt;shiftrows&lt;/em&gt; steps (which also confirms the keysize is 128 bits). Still, the SubBytes table was not the normal one, and the other steps were hard to map to parts of the code.&lt;/p&gt;
&lt;p&gt;A fruitless attempt I made was to walk through each step of each round of the crypto, trying to identify if I could figure out specific bytes of the key by which bytes changed in the data. This did not get me too much farther along in figuring out the key, but it did really help me get a good understanding of how AES works. One indispensible tool in this was this &lt;a href=&#34;https://github.com/rwg/aes-horror-shows/tree/master/postscript&#34;&gt;postscript script&lt;/a&gt; that shows the result of every single step in every round, from plain text and key down to the final ciphertext.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://grazfather.github.io/assets/2017-09-03-RHME3-Quals-Whitebox-aes-visualization.png&#34; alt=&#34;aes visualization&#34;&gt;&lt;/p&gt;
&lt;p&gt;At some point it dawned on me that &amp;ldquo;&lt;strong&gt;whitebox&lt;/strong&gt;&amp;rdquo;, the challenge name, might mean something, and that&amp;rsquo;s when I dove into the papers. The most useful papers I found on, appropriately, whiteboxcrypto.com. I read a handful of good papers, including a &lt;a href=&#34;http://phrack.org/issues/68/8.html#article&#34;&gt;phrack article&lt;/a&gt;, but it was the &lt;a href=&#34;https://eprint.iacr.org/2015/753.pdf&#34;&gt;paper&lt;/a&gt; by some guys from NXP and Quarks Lab that really unlocked it for me.&lt;/p&gt;
&lt;p&gt;How did it unlock it for me? While it was a well written article and I got the idea, I&amp;rsquo;m still dumb and didn&amp;rsquo;t know how to determine at which points to take measurements, or just in general how to use any measures I could make. Luckily they provide a &lt;a href=&#34;https://github.com/SideChannelMarvels/Tracer&#34;&gt;tool&lt;/a&gt; that utilizes Valgrind or Intel PIN to instrument a binary and traces memory reads, writes, and executions, along with a tool that nicely visualizes it. I set it up (choosing Valgrind to instrument) and, once I constrained understand what the memory region constraints meant (they constrain the code segments that are active for, not which memory regions they trace), I was able to see some cool visualizations of what was happening. Below, for example, you can clearly see the ten rounds of &lt;em&gt;shiftrows&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://grazfather.github.io/assets/2017-09-03-RHME3-Quals-Whitebox-aes-memory-trace.png&#34; alt=&#34;memory trace&#34;&gt;&lt;/p&gt;
&lt;p&gt;This was cool, but it didn&amp;rsquo;t solve anything for me, I still had a bunch of data I didn&amp;rsquo;t know how to translate to a key.&lt;/p&gt;
&lt;p&gt;A bit more playing around and reading led me to another one of their projects called &lt;a href=&#34;https://github.com/SideChannelMarvels/Daredevil&#34;&gt;Daredevil&lt;/a&gt;, which is some kind of magic. There is another project, &lt;a href=&#34;https://github.com/SideChannelMarvels/Deadpool&#34;&gt;Deadpool&lt;/a&gt; with a bunch of examples of its use plus a bunch of helper scripts.&lt;/p&gt;
&lt;p&gt;I went through the examples until I found one that seemed suitably similar and basically just had to rewrite two functions, to &amp;lsquo;shape&amp;rsquo; the input and output into a form it can handle and gave it a run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;➜  DCA git:&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;master&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; ✗ python trace_it.py
&lt;span style=&#34;color:#ae81ff&#34;&gt;00000&lt;/span&gt; F746E994FE04B79D7002734057868641 -&amp;gt; 8A9AB1CEFD6AAEAAA0BAF5CB34E5DCB8
&lt;span style=&#34;color:#ae81ff&#34;&gt;00001&lt;/span&gt; 9770F3A54E25A2D63A1B32366F74875E -&amp;gt; 4C92744102E322A45F4A1E6460FC57BD
&lt;span style=&#34;color:#ae81ff&#34;&gt;00002&lt;/span&gt; C4B3A5FE48BA8D49712A8EF3C5F5DF06 -&amp;gt; CB7CCD1DD1497EA4120D27FDA868F566
&lt;span style=&#34;color:#ae81ff&#34;&gt;00003&lt;/span&gt; 9BD0520D814F780534D06F806BA09776 -&amp;gt; E3677ADADCE9599CA6D4895924CF96F1
&lt;span style=&#34;color:#ae81ff&#34;&gt;00004&lt;/span&gt; 4CD98EFA2CD34C81DA91BB67CDBFE0C2 -&amp;gt; 0DA2C69CBED6C6FA5D28740552817442
...
➜  DCA git:&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;master&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; ✗ daredevil -c mem_addr1_rw1_64_48696.attack_sbox.config

&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;CONFIGURATION&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
...
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;/CONFIGURATION&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; File LUT/AES_AFTER_SBOX not found, using /usr/local/share/daredevil/LUT/AES_AFTER_SBOX instead.
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Lookup table specified at LUT/AES_AFTER_SBOX

&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;ATTACK&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Computing 1-order correlations...
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;ATTACK&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Key byte number &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;ATTACK&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Target bit number &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

...

Most probable key max&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;abs&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:
1: 16: 61316c5f7434623133355f525f6f5235
2: 15.6891: 61076c5f7434623133355f525f6f5235
3: 15.6888: 6131385f7434623133355f525f6f5235
4: 15.6875: 61316c0d7434623133355f525f6f5235
5: 15.6872: 61316c5f7434953133355f525f6f5235
6: 15.378: 6107385f7434623133355f525f6f5235
7: 15.3766: 61076c0d7434623133355f525f6f5235
8: 15.3763: 6131380d7434623133355f525f6f5235
9: 15.3763: 61076c5f7434953133355f525f6f5235
10: 15.376: 6131385f7434953133355f525f6f5235
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;INFO&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Total attack of file LUT/AES_AFTER_SBOX &lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt; in 134.893164 seconds.

➜  DCA git:&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;master&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; ✗ python -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;print &amp;#39;61316c5f7434623133355f525f6f5235&amp;#39;.decode(&amp;#39;hex&amp;#39;)&amp;#34;&lt;/span&gt;
a1l_t4b135_R_oR5&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Below is my script&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sys
sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;insert(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;../../&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; deadpool_dca &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;processinput&lt;/span&gt;(iblock, blocksize):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (hex(iblock)[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rjust(&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hex&amp;#39;&lt;/span&gt;), [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--stdin&amp;#34;&lt;/span&gt;])
    &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pdb; pdb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_trace()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; None

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;processoutput&lt;/span&gt;(output, blocksize):
    output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; output&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replace(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rstrip()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; int(output, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)

T&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;TracerGrind(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;../target/wb_challenge&amp;#39;&lt;/span&gt;, processinput, processoutput, ARCH&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;amd64, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)
T&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run(&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# Number of runs. Raise if it doesn&amp;#39;t work&lt;/span&gt;
bin2daredevil(configs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;attack_sbox&amp;#39;&lt;/span&gt;:   {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;algorithm&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;AES&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;position&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;LUT/AES_AFTER_SBOX&amp;#39;&lt;/span&gt;},
                       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;attack_multinv&amp;#39;&lt;/span&gt;:{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;algorithm&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;AES&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;position&amp;#39;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;LUT/AES_AFTER_MULTINV&amp;#39;&lt;/span&gt;}})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note how in the end I needed to know almost &lt;em&gt;NOTHING&lt;/em&gt; about the binary, only how it expects input (and it provided a &lt;code&gt;--stdin&lt;/code&gt; option, which was convenient), prints its output, and that it implements AES-128. All props go to the guys who made these tools.&lt;/p&gt;
- https://grazfather.github.io/posts/2017-09-03-rhme3-quals-whitebox/ - </description>
        </item>
    
    
    
        <item>
        <title>My Reading Summary - November-December 2016</title>
        <link>https://grazfather.github.io/posts/2017-08-15-reading-nov-dec-2016/</link>
        <pubDate>Tue, 15 Aug 2017 12:00:00 +0000</pubDate>
        
        <guid>https://grazfather.github.io/posts/2017-08-15-reading-nov-dec-2016/</guid>
        <description>Grazfather https://grazfather.github.io/posts/2017-08-15-reading-nov-dec-2016/ -&lt;p&gt;&lt;strong&gt;Game Hacking&lt;/strong&gt; - I was really excited by this book, since game hacking is a big part of how I got into reverse engineering. I even pre-ordered it and submitted a bunch of corrections in the pre-release (Some of which was not corrected, which is interesting&amp;hellip;). Overall this book was disappointing, and I think my high hopes were based on the publisher. I was hoping for a book similar to &lt;em&gt;Practical Malware Analysis&lt;/em&gt;, with high quality exercises, and matching writeups of every single exercise. Instead, the exercises are on simplicistic purpose-build &amp;lsquo;games&amp;rsquo; no one would ever play, and there are much fewer than there could be. The introductions to data structures, C++ stl, and some tools were all actually pretty good, but overall the book felt rushed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The New Turing Omnibus: 66 Excursions In Computer Science&lt;/strong&gt; - This book is terrible. It&amp;rsquo;s a collection of 66 different short essays on different CS topics, but there is basically no flow between them, they&amp;rsquo;re super dry, and they don&amp;rsquo;t really approach the subject in a manner conducive to understanding. If you already know the subject, then the chapter might help jog your memory, but you&amp;rsquo;d probably learn more and more effectively by just reading the wikipedia page on the subject. I found a very small minority of the chapters to be good (e.g. compression with Huffman trees), but I definitely should have saved myself hours of my life and just thrown this book in the trash.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Programming Pearls (Second Edition)&lt;/strong&gt; - While this book, I think, is starting to show its age, it at least manages to stay relevant by covering topics that are timeless. While we don&amp;rsquo;t really need to micro-optimize anymore &amp;ndash; I&amp;rsquo;m happy to start up a python interpreter just to do a simple conversion or calculation, the lessons in how to tackle problems are, I think, the main takeaway. The chapters are actually &amp;lsquo;columns&amp;rsquo; that were published in some computing magazine, and unfortunately I don&amp;rsquo;t think the format maps over very well (if you&amp;rsquo;re publishing a book, I think the columns deserve a rewrite to match the medium). There are plenty of exercises to work through, but again, comparing this book to PMA, I wish the solution were more fleshed out.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Martian&lt;/strong&gt; (Audiobook) - I hadn&amp;rsquo;t heard of this book at all until the movie came out, and I enjoyed the movie thoroughly, but I had the feeling that a lot of the scientific jargon was dumbed down for mass appeal, so I thought I&amp;rsquo;d check out the book. Other than the very end, the movie follows the book pretty closely, but the book goes into more technical detail that I found very interesting. I&amp;rsquo;m not sure how much research the author did, or if he&amp;rsquo;s just bullshitting, but I was very impressed with how much he took into consideration, things I would never even consider (e.g. the constency of some food item, melting and then shifting in flight to throw off the balance of the whole spacecraft). I think the humour of the protagonist was more convincing in the movie (granted it&amp;rsquo;s Matt Damon), but that&amp;rsquo;s a fair trade-off for the increase in nerdy details which I thoroughly enjoyed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Science of Mindfulness: A Research-Based Path to Well-Being&lt;/strong&gt; - A buddy of mine, maybe a year and a half ago, convinced me to try mindfulness meditation. Given the rational way I try to approach things, I wanted to read up on the purported benefits, and the title here caught my eye. While I learned a good amount, I felt that it was pretty biased, and didn&amp;rsquo;t find the cited research very convincing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Great Gatsby&lt;/strong&gt; - Continuing my goal to read through some of the classics, I finally made it to &lt;em&gt;The Great Gatsby&lt;/em&gt;. I had somehow made it this far without even knowing what the book&amp;rsquo;s about. I&amp;rsquo;m no literary analyst, so I&amp;rsquo;ll admit I maintain only a pretty superficial understanding of the story. In short, reasonable guy Nick moves to a nouveau riche part of New York where he meets Jay Gatsby, who is in love with Nick&amp;rsquo;s cousin Daisy. Daisy&amp;rsquo;s married to Tom, but Tom&amp;rsquo;s having an affair. Jay and Daisy start an affair themselves, but Tom becomes aware of it and calls Jay out, and in the confrontation Daisy chooses Tom. Daisy and Jay drive back to their neighbourhood, but on the drive Daisy hits and kills Myrtle - The woman that Tom is cheating on her with, though Daisy doesn&amp;rsquo;t know this. It is assumed that Jay was driving, and Jay is willing to take the blame because of his love for Daisy. Myrtle&amp;rsquo;s husband infers that Myrtle was cheating on his with Jay, and he kills Jay and then himself at Jay&amp;rsquo;s home. Tragic. A quick read, a little bit depressing, but I enjoyed being taken to the era (1922 &amp;ldquo;The Jazz Age&amp;rdquo;) and liked how the characters contrasted eachother.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This is (not) Rocket Science&lt;/strong&gt; - This is basically a marketing book for the hardware features in the new generation of PIC microcontrollers. Still, understanding that your microcontroller is more than a tiny CPU with GPIOs will help you design your product or project in a way that only relies on software where it needs to. While it&amp;rsquo;s easy and tempting to just throw a fast processor at it (and with &lt;a href=&#34;https://en.wikipedia.org/wiki/ESP8266&#34;&gt;Wifi-enabled microcontrollers&lt;/a&gt; for under $3 how &lt;em&gt;can&lt;/em&gt; you resist?), I still find value in microcontrollers that are purpose-built for a particular task. I also find it valuable to understand the peripherals available, and this book helped me become more open to the idea of using them over &amp;lsquo;falling back&amp;rsquo; on a software-only crutch.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;xv6 a simple, Unix-like teaching operating system&lt;/strong&gt; - As a very hands on guy, I really enjoyed this book. The book comes accompanied with a &lt;em&gt;tiny&lt;/em&gt; operating system, all the code you need to build it, plus everything setup in &lt;code&gt;qemu&lt;/code&gt; to run it. This makes it easy to make small changes and see how they make tangible differences of the behaviour of the system. While I didn&amp;rsquo;t do all of the exercises, I did many and found them fun and beneficial, though I wish there were bundled solutions, since I always like to compare my work (Broken record, here). Overall, though, I&amp;rsquo;d probably recommend it over &amp;ldquo;the dinosaur book&amp;rdquo; &lt;em&gt;Operating System Concepts&lt;/em&gt; as an introduction to operating systems, since I think a hands on, holistic understanding of the basic workings are a better first step to the more abstract concepts.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Princess Bride&lt;/strong&gt; - Having loved the movie since I was a kid, I had high hopes for this book. While it&amp;rsquo;s a good book, I don&amp;rsquo;t think it offers a lot over the movie. Every chapter or so is interjected by the author talking about the book or the movie, and I found this more confusing than anything.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;World of Ice &amp;amp; Fire: The Untold History of Westeros and the Game of Thrones&lt;/strong&gt; (Audiobook) - I mistakenly thought that this book was canonical gross-scale tale of Westeros, but instead it&amp;rsquo;s actually just basically maesters reciting the known history of Westeros. Being a big fan of &amp;ldquo;A Song of Ice and Fire&amp;rdquo; this didn&amp;rsquo;t bother me, but it certainly slowed down how quickly I could work through it (it&amp;rsquo;s pretty dry at times). One thing that I like is that it is the maesters&amp;rsquo; version of history, so there are certain inaccuracies in there that we would only know about because we&amp;rsquo;ve had multiple points of view through the five books. While this could be confusing to many, I think it&amp;rsquo;s par for the course for GRRM: You don&amp;rsquo;t expect a happy, just ending, and you don&amp;rsquo;t expect the correct history to be recorded.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Algorithms to Live By: The Computer Science of Human Decisions&lt;/strong&gt; - This book was rather interesting, though not too beneficial to me. The authors present pretty good introductions to a few algorithms or mathematical theorems and tries to map them to applicable real life scenarios. One example of this is the &amp;ldquo;Optimal Stopping Problem&amp;rdquo;, where one has to determine when is the best time to stop looking for a better alternative, assuming we can&amp;rsquo;t take back a &amp;lsquo;pass&amp;rsquo; decision. The authors map this to looking for a spouse: When should you settle? While I found it interesting, I didn&amp;rsquo;t really find it practical, and I was already pretty familiar with most of the algorithms. That said, I would recommend this to a non computer scientist or programmer because it&amp;rsquo;s probably a pretty good introduction into how we solve problems using a procedural or mathematical approach.&lt;/p&gt;
- https://grazfather.github.io/posts/2017-08-15-reading-nov-dec-2016/ - </description>
        </item>
    
    
    
        <item>
        <title>My Reading Summary - September-October 2016</title>
        <link>https://grazfather.github.io/posts/2017-01-22-reading-sept-oct-2016/</link>
        <pubDate>Sun, 22 Jan 2017 12:00:00 +0000</pubDate>
        
        <guid>https://grazfather.github.io/posts/2017-01-22-reading-sept-oct-2016/</guid>
        <description>Grazfather https://grazfather.github.io/posts/2017-01-22-reading-sept-oct-2016/ -&lt;p&gt;&lt;strong&gt;The Return of the King&lt;/strong&gt; - While I didn&amp;rsquo;t enjoy this one quite as much as I did &lt;em&gt;The Two Towers&lt;/em&gt;, I still enjoyed it a lot. Yet again I was surprised by how much Peter Jackson left out of the films. Of note, the books goes on for a good handful of pages beyond where Sam and Frodo reunite with the rest of the fellowship: They return to The Shire to find that a lot has changed. The hobbits are under a sort of dictatorship controlled by humans. The new, brave, rich (and tall, thanks to the ents&amp;rsquo; draught) fellowship hobbits have to fight everybody off before things return to normal. Turns out Saruman was behind this as well (he doesn&amp;rsquo;t die at his tower like in the extended version of the films). I actually found myself quite sad when it was over, as I didn&amp;rsquo;t want the adventure to be over. For that reason I bought &lt;em&gt;The Hobbit&lt;/em&gt; shortly after.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Gone Girl&lt;/strong&gt; (Audiobook) - I wasn&amp;rsquo;t sure what to expect with this one, but I am happy to report that I was pleased. I remember trying to watch the movie while on a plane and I couldn&amp;rsquo;t get more than 10 minutes into it. It almost prevented me from listening to the book. I don&amp;rsquo;t want to spoil this one, but the twists were great.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Gunslinger&lt;/strong&gt; - About 12 years ago someone spoiled the whole storyline arch of this series. I finally got over it enough to try and pick it up (though unfortunately I couldn&amp;rsquo;t forget the details of the spoiler, no matter how much I tried). I haven&amp;rsquo;t read much Stephen King but I think this is a pretty good intro to his writing. It&amp;rsquo;s a very interesting genre: Fantasy cowboy pre-post apocalyptic. There are allusions to modern (at the time of writing) technology and music, though it takes place in a &lt;em&gt;different&lt;/em&gt; universe. I found the pace sometimes slow but still finished the book rather quickly.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Predictably Irrational: The Hidden Forces That Shape Our Decisions&lt;/strong&gt; - I&amp;rsquo;d consider this book the &amp;lsquo;light&amp;rsquo; version of &lt;em&gt;Thinking Fast and Slow&lt;/em&gt;, though it does cover some cognitive biases that were absent from Kahneman&amp;rsquo;s book. Looking back, I could have avoided this book, only because I like more scientific literature, but I still think it&amp;rsquo;s a good book. I&amp;rsquo;d consider it &amp;lsquo;cognitive biases for the layman&amp;rsquo;, and as such would recommend it to anyone who may be intimidated by &lt;em&gt;Thinking Fast and Slow&lt;/em&gt;. I appreciate how Dan Ariely breaks down the biases and makes them easily digestible.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Selfish Gene&lt;/strong&gt; (Audiobook) - Fascinating book. I thought I had a pretty good idea about how evolution works, and even the basics of genetics, but this book showed me that I knew nothing. Richard Dawkins, in his typical arrogant fashion, argues that it&amp;rsquo;s not species of organisms that fight to reproduce, but that individual genes are in it to win. An organism, a body, or any unit above the gene level is nothing but the vehicle with which a gene used to spread its genetic material. A particular gene has no qualms about wiping out other genes if it means its own propagation. Genes only cooperate if it is in their own self interest. Of course, genes have no ambitions or goals, they are simply something that evolved by chance that can self replicate, and the variations of this simple &amp;lsquo;gene&amp;rsquo; that still exist have something that keep itself existing now. Dawkins explains how even male/female could be considered different species: Somewhere along the way a different tactic was taken to procreate: The female&amp;rsquo;s slower, more costly ovum, vs. the male&amp;rsquo;s &amp;ldquo;machine gun&amp;rdquo; approach. There is a fair amount of game theory as well that explains how certain interactions between species approach a stable state where the advantages one has over an other is balanced by other factors, keeping the balance in check. This is also the book where Dawkins coined the term &amp;lsquo;meme&amp;rsquo;: A behaviour, idea, or style that spreads through a population. I&amp;rsquo;m willing to bet that 99% of people don&amp;rsquo;t know what they&amp;rsquo;re saying when they share their cat photos. I &lt;em&gt;highly&lt;/em&gt; recommend this book to anyone who&amp;rsquo;s willing to think about its contents (and the uncomfortable implications that come with it).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Hobbit&lt;/strong&gt; (Audiobook) - Since I felt there was a absence in my life after finishing the &lt;em&gt;The Lord of The Rings&lt;/em&gt; trilogy, I decided to pick this up. I had seen the first of the films but I didn&amp;rsquo;t enjoy it too much. I felt splitting up a book shorter than &lt;em&gt;Fellowship&lt;/em&gt; into three movies was a money grab, and some of the scenes made it clear they were trying to run the clock. This book is interesting enough: It sets you up for some of the lore of the LOTR and the adventure is fun enough. Still though, I don&amp;rsquo;t think I&amp;rsquo;d care to read it again.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Practical Malware Analysis&lt;/strong&gt; - This book is fantastic. I developed most of my IDA and general reverse engineering skills by going through the labs in this book (I even &lt;a href=&#34;https://grazfather.github.io/pma/&#34;&gt;wrote about every single one&lt;/a&gt;. The book is notable for its high quality writing, it&amp;rsquo;s high quality labs, and the fact that it includes a couple page writeup for absolutely every lab included. This is the big distinguisher, which makes me consider this book the best tech book I have ever read. It&amp;rsquo;s starting to show its age now, focusing primarily on Windows XP 32 bit, and so is missing some newer techniques and mitigations used by post-Vista operating systems. I still recommend it to anyone (whether or not they have an interest in malware) who wants to learn how to reverse engineer binaries.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Drawing of the Three&lt;/strong&gt; - The second &lt;em&gt;Gunslinger&lt;/em&gt; book introduces some new characters who come from a new world. This book is signicantly more &amp;lsquo;out there&amp;rsquo; than the first, and unfortunately one of the characters (and the way she speaks) is irritating. I didn&amp;rsquo;t have a difficult time finishing this book, but it didn&amp;rsquo;t leave me compelled to start the third. Four months later I still haven&amp;rsquo;t picked it up.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Slight Edge&lt;/strong&gt; - This is probably a pretty good book to get you motivated. There are many whom I&amp;rsquo;d recommend this book to for exactly that reason. That said, I don&amp;rsquo;t think this book has that much substance. It follows a very formulaic recipe of &amp;ldquo;this is how my life was bad, this is how I changed it, this is how it could change for you&amp;rdquo; and has a lot of filler. The basic idea is that we are faced with choices every day in our lives, and the choices compound upon themselves to take your life in a certain direction: You can choose to eat a burger or do pushups. Every time you make a choice like this it&amp;rsquo;s a &amp;lsquo;vote&amp;rsquo; in that direction, which makes subsequent choices more likely to occur. One analogy I liked was where a person&amp;rsquo;s life path is shown as an oscillating wave: Course correcting for when it gets too bad (e.g. oh man I&amp;rsquo;m too fat, crash diet time), and becoming complacent when happy with it. On either of these arcs one could continue, and instead of hitting the cusp and eventually turning around they could continue to see exponential growth. I&amp;rsquo;ll probably recommend it as something to read in order to motivate yourself, though I do wish it were about half the length.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How to Fail at Almost Everything and Still Win Big: Kind of the Story of My Life&lt;/strong&gt; (Audiobook) - This is Scott Adams&amp;rsquo; book on his theory that systems are better than goals &amp;ndash; That&amp;rsquo;s something I totally agree with. Unfortunately I think I could argue it better than him. He talks about many of his failures and how they ended up being OK. He talks about how some of his attempts were successful in the end. Most of his failed ventures were either inconsequential or happened after he had found success with his comic. Although I think some could extract some good advice from the book, it wasn&amp;rsquo;t very useful to me, already more-or-less having that mindset.&lt;/p&gt;
- https://grazfather.github.io/posts/2017-01-22-reading-sept-oct-2016/ - </description>
        </item>
    
    
    
        <item>
        <title>Qiwi CTF 2016 - RE300_3</title>
        <link>https://grazfather.github.io/posts/2016-11-18-qiwictf-re300_3/</link>
        <pubDate>Fri, 18 Nov 2016 12:00:00 +0000</pubDate>
        
        <guid>https://grazfather.github.io/posts/2016-11-18-qiwictf-re300_3/</guid>
        <description>Grazfather https://grazfather.github.io/posts/2016-11-18-qiwictf-re300_3/ -&lt;p&gt;This challenge provided &lt;em&gt;task.bin&lt;/em&gt; an ELF.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;task.bin: ELF 32-bit LSB executable, Atmel AVR 8-bit, version &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SYSV&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, statically linked, not stripped
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Whoa! &lt;a href=&#34;https://en.wikipedia.org/wiki/Atmel_AVR&#34;&gt;AVR&lt;/a&gt;! Lucky for us it&amp;rsquo;s 1. an ELF and 2. not stripped.&lt;/p&gt;
&lt;p&gt;Popping it into IDA and manually selecting &amp;ldquo;Atmel AVR&amp;rdquo; as the CPU I was happy to see demangled C++ function names as well as global symbols. Looking at the globals there were a few of note: &lt;code&gt;i&lt;/code&gt;, &lt;code&gt;int_recorded&lt;/code&gt;, &lt;code&gt;buttonState&lt;/code&gt;, and &lt;code&gt;Serial&lt;/code&gt;. OK, this clearly expects input from the GPIOs and/or over serial.&lt;/p&gt;
&lt;p&gt;Looking at the functions, there were a few to reinforce my hypothesis: &lt;code&gt;HardwareSerial::read&lt;/code&gt; for one. Although I didn&amp;rsquo;t see anything that showed GPIOs being read, this wasn&amp;rsquo;t too big of a deal: GPIOs are easily read just by reading from a certain register. There were a few that made me a little bit nervous: &lt;code&gt;TIMER0_OVF&lt;/code&gt; specifically. If I had to deal with precise timing I would not have fun. The timers, however, are probably used to keep the serial clock.&lt;/p&gt;
&lt;p&gt;Without a &lt;code&gt;main&lt;/code&gt; function I started my analysis at &lt;code&gt;__RESET&lt;/code&gt;. Thanks to the labels I was able to easily skip most of the function, which was just clearing our the &lt;em&gt;.bss&lt;/em&gt; segments. Looking at where the &amp;lsquo;function&amp;rsquo; &amp;lsquo;ended&amp;rsquo;, I found a jump to, basically, an infinite loop, and just before it a call to &lt;code&gt;sub_2D4&lt;/code&gt;. This is &lt;code&gt;main&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I started in &lt;code&gt;main&lt;/code&gt; but was quickly overwhelmed with what was going on. I am not familiar with the instruction set, and since a lot of it is configuration, I would have to constantly refer to the datasheet. I needed something faster.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://grazfather.github.io/assets/2016-11-18-QiwiCTF-RE300_3-main.png&#34; alt=&#34;String references&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now the AVR is a series of microcontrollers that is ubiquitous in electronics. Your TV&amp;rsquo;s remote might have one (though it&amp;rsquo;s likely a PIC). They exploded in popularity, however, with the introduction of the Arduino. I had a hunch that this was an Arduino binary, so I decided to see what an arduino binary looks like in IDA.&lt;/p&gt;
&lt;p&gt;I wrote up a simple &amp;lsquo;sketch&amp;rsquo; that setup serial communication, sent and received a few bytes, and read input from a few GPIOs. My goal was to get the same set of functions and a similar setup to my mystery binary &amp;ndash; This would let me find the common code and basically ignore it completely.&lt;/p&gt;
&lt;p&gt;After figuring out where the damned ELF is written to when compiled (some temp folder), I popped it in IDA and was happy to see that the code was indeed &lt;em&gt;very&lt;/em&gt; similar. &lt;code&gt;micros&lt;/code&gt;, for example, was a function I thought I might have to reverse, but it turned out it was just the delay function. All I really needed to look at was &lt;code&gt;main&lt;/code&gt;, and I could ignore most of the first basic block, as it was just serial setup.&lt;/p&gt;
&lt;p&gt;Since I figured the binary would send something out on the serial line I looked at the strings and found three that mattered: &amp;quot; recorded&amp;rdquo;, &amp;ldquo;Wrong flag&amp;rdquo;, and &amp;ldquo;Right flag&amp;rdquo;. Easy! Just find the Xrefs and trace back to find how to reach either!&lt;/p&gt;
&lt;p&gt;This is where I hit another snag: No Xrefs. Come to think of it, I couldn&amp;rsquo;t find an xref to any of the globals I found. There was a reason for this. Two actually:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;AVRs use a &lt;a href=&#34;https://en.wikipedia.org/wiki/Harvard_architecture&#34;&gt;Harvard Architecture&lt;/a&gt;. That means that they have two address spaces. One for code (read off of the internal flash) and one for data. The CPU knows which to use simply by context: Branch instructions use the code address space, sram reads use the data. This was messing up IDA, since it expects one. Whoever made the AVR CPU module for IDA handled this: The data segment was mapped to start at 0x800000. This means that my globals appeared way higher than they really were: &lt;code&gt;buttonState&lt;/code&gt; was shown as 0x800168 but was actually at 0x168.&lt;/li&gt;
&lt;li&gt;AVRs are 8-bit micros. This means that the registers (most) are only 8 bits long. This means that they can&amp;rsquo;t even hold an entire address! This is solved with special instructions that expect an address across two registers.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Armed with this knowledge I was able to find the xrefs. I just had to look for code that wrote two immediates into two registers that, when appended to eachother, formed the 16-bit address I was looking for. Skimming through the code I quickly found what I was looking for: The branch to &amp;ldquo;Right flag&amp;rdquo; at 0x42A.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://grazfather.github.io/assets/2016-11-18-QiwiCTF-RE300_3-loop.png&#34; alt=&#34;String references&#34;&gt;&lt;/p&gt;
&lt;p&gt;Despite knowing where I needed to get to, I had a very hard time figuring out where the input was read: It was time to go dynamic.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/buserror/simavr&#34;&gt;Simavr&lt;/a&gt; is a great little AVR emulator and I could not have solved this challenge without it. While there&amp;rsquo;s a CLI to run hex files, what I wanted (gpio and serial) was a little bit more involved. Luckily there were examples that did what I needed. Guessing that the AVR was an atmega328 (an AVR used commonly in the Arduino) it was little trouble combining the examples and adding a few tweaks to get it running. Using &lt;code&gt;cu&lt;/code&gt; to connect to the tty that simavr created I could see the output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;0 recorded
0
0
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I tried to send text over serial but it appeared to be non responsive. I ended up writing code to randomly press GPIOs, but I don&amp;rsquo;t think it worked at all, what I needed was a debugger. Luckily this is another thing that simavr supports! My simulation code can be found &lt;a href=&#34;https://gist.github.com/Grazfather/32d7c90322b48a13c4d6134d25cc8e0a&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Installing &lt;code&gt;avr-gdb&lt;/code&gt; (with &lt;code&gt;brew&lt;/code&gt;) and setting up simavr to setup a gdb server I could connect. Only issue was that breakpoints didn&amp;rsquo;t work! After some struggling I found two peculiarities:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You cannot set a breakpoint on a specific address. GDB will add 0x800000 (like IDA does) but this is out of the address space and will never hit. You can get around this by setting PC-relative breakpoints e.g. &lt;code&gt;b *($pc + 0x2c)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;For some reason the addresses in GDB are &lt;em&gt;double&lt;/em&gt; what you see in IDA. I found this by setting random traps (which &lt;em&gt;do&lt;/em&gt; work) and correlating the GDB address with the address in main.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This meant that if I wanted to set up a breakpoint in GDB I had to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Find the target address in IDA and double it.&lt;/li&gt;
&lt;li&gt;Find the current PC in GDB.&lt;/li&gt;
&lt;li&gt;Subtract the two numbers and Use the offset to set the bp &lt;code&gt;b *($pc + &amp;lt;offset&amp;gt;)&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now it was a matter of forcing the code path to go towards the prints I wanted. I set up breakpoints at the conditional branches at 0x3F4, 0x3F8, 0x41C, and 0x431. At each point I simply set the appropriate register or status flag to take the branch I wanted. The branch at 0x431 is hit in a loop, each time after doing a series of comparisons. If any fail the badboy message is printed. These checks are what I need to pass. The check before that, at 0x41C, checks that some variable is 10. Since the flag format for this challenge was 10 numbers, this is clearly a check that enough have been reported.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://grazfather.github.io/assets/2016-11-18-QiwiCTF-RE300_3-countcheck.png&#34; alt=&#34;Num inputs check&#34;&gt;&lt;/p&gt;
&lt;p&gt;I got around these by faking the number of report values to 10 at the 0x41C check. The badboy check I got around by setting up a command on the breakpoint to automatically dump the registers (&lt;code&gt;info reg&lt;/code&gt; or &lt;code&gt;i r&lt;/code&gt;), set the zero flag in the status register to pass the check (&lt;code&gt;set $SREG = 0x37&lt;/code&gt; has this bit set and didn&amp;rsquo;t mess with the others), and then &lt;code&gt;c&lt;/code&gt;ontinuing. I then looked at the values in r18 and r19, that were printed out, appended them (&lt;code&gt;print r19&amp;lt;&amp;lt;8 + r18&lt;/code&gt;), and submitted.&lt;/p&gt;
&lt;p&gt;Flag: 307, 908, 621, 588, 332, 515, 546, 605, 863, 90&lt;/p&gt;
- https://grazfather.github.io/posts/2016-11-18-qiwictf-re300_3/ - </description>
        </item>
    
    
    
        <item>
        <title>Manual Unpacking</title>
        <link>https://grazfather.github.io/posts/2016-11-06-manual-unpacking/</link>
        <pubDate>Sun, 06 Nov 2016 00:00:00 +0000</pubDate>
        
        <guid>https://grazfather.github.io/posts/2016-11-06-manual-unpacking/</guid>
        <description>Grazfather https://grazfather.github.io/posts/2016-11-06-manual-unpacking/ -&lt;p&gt;While packers&amp;rsquo; original intention is to minimize the size of a binary, they are often used today as an &amp;lsquo;easy&amp;rsquo; form of obfuscation, making us reverse engineers&amp;rsquo; lives more difficult. In order to get around them it&amp;rsquo;s important to understand how they work in practice first.&lt;/p&gt;
&lt;p&gt;Since writing an application that is intended to be packed is a pain the ass, packing is usually done as a separate step, and most packers can work basically agnostic of the content of what it&amp;rsquo;s packing.&lt;/p&gt;
&lt;p&gt;The way packers work is that by creating a binary that &amp;lsquo;hijacks&amp;rsquo; the original entry point of the target binary to instead call an unpacking stub. The packer packs the target binary in some reversible way and hides it in the new binary. The unpacking stub locates the original, packed binary, unpacks it into memory, and finishes by jumping to the &lt;em&gt;original entry point&lt;/em&gt; (OEP). Since it&amp;rsquo;s often the intention to hide the imports that the final binary will use, the packer often has to build its own import table and resolve the imports itself: This is prevent a static tool like &lt;code&gt;readelf&lt;/code&gt; or &lt;code&gt;CFF Explorer&lt;/code&gt; from getting an idea of the functionality of the original packed binary in its packed form.&lt;/p&gt;
&lt;p&gt;Some well-known packers provide tools for unpacking statically or have the technique for unpacking documented somewhere. If you can identify the packer used, it&amp;rsquo;s worth looking for a tool that can unpack it for you. An example of this is &lt;a href=&#34;https://upx.github.io/&#34;&gt;UPX&lt;/a&gt;. Some binaries will use a modified packer, which might fail to unpack with the normal tool, or worse, unpack &lt;em&gt;incorrectly&lt;/em&gt;. &lt;a href=&#34;http://flare-on.com/2015.html&#34;&gt;Flare-on 2015&lt;/a&gt; had such a challenge: It seemed to be vanilla UPX, but if you unpacked it using the tool, the challenge was unsolvable.&lt;/p&gt;
&lt;p&gt;When it comes to obtaining the unpacked binary, the process usually involves identifying the &lt;em&gt;OEP&lt;/em&gt; and stopping once execution has reached that point. This jump is usually refered to as a &lt;em&gt;tail jump&lt;/em&gt; (no relation to a tail call).&lt;/p&gt;
&lt;p&gt;Once the OEP has been found, the process memory needs to be dumped, the entry point needs to be changed to the OEP (since the unpacking stub probably still exists in the process memory), and the import table needs to be fixed. Luckily there are tools for that. &lt;code&gt;OllyDump&lt;/code&gt; and &lt;code&gt;ImpREC&lt;/code&gt; are two such tools, and tutorials on how to use them litter the internet.&lt;/p&gt;
&lt;h2 id=&#34;manual-unpacking-techniques&#34;&gt;Manual Unpacking Techniques&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Put breakpoints at the end of loops: At this point try to re-analyze the binary for new assembly routines.&lt;/li&gt;
&lt;li&gt;Look for calls that don&amp;rsquo;t return&lt;/li&gt;
&lt;li&gt;Look for jumps with no code after them.&lt;/li&gt;
&lt;li&gt;Look for long jumps that jump into a different section: These can indicate a jump from the unpacking stub and the binary itself.&lt;/li&gt;
&lt;li&gt;Look for &lt;code&gt;pushad&lt;/code&gt;. Sent a memory breakpoint on these stack addresses, which should break on the corresponding &lt;code&gt;popad&lt;/code&gt;. These are often used to save the context for &lt;code&gt;main&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Add breakpoints on &lt;code&gt;GetVersion&lt;/code&gt; or &lt;code&gt;GetCommandLineA&lt;/code&gt;: These are often called from the normal &lt;code&gt;main&lt;/code&gt; wrapper that windows compilers add.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GetModuleHandle&lt;/code&gt; for GUI apps.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;gcore&lt;/code&gt; on linux to dump a process&amp;rsquo;s memory once it&amp;rsquo;s been unpacked. This provides a CORE file, which can be openend in gdb or, even better, IDA. Note that the entry point won&amp;rsquo;t have been patched, so this only really helps you with static analysis.
&lt;ul&gt;
&lt;li&gt;You can use &lt;code&gt;ProcDump&lt;/code&gt; similarly on windows.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Some more advanced unpacker only unpack &amp;lsquo;on demand&amp;rsquo;, meaning that the whole binary is never fully unpacked unless you touch all functionality. This can usually be avoided by scripting your debugger to call the appropriate unpacking routines.&lt;/li&gt;
&lt;li&gt;DLLs can be unpacked, but their exports must remain. &lt;code&gt;DllMain&lt;/code&gt;, which runs on load, then, contains the unpacker. Make sure to change your debuggers settings to break on &lt;em&gt;load&lt;/em&gt; to break early enough to walk through this process.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;common-packers&#34;&gt;Common Packers&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;UPX&lt;/li&gt;
&lt;li&gt;PECompact&lt;/li&gt;
&lt;li&gt;ASPack - Use a hardware breakpoint on the stack to easily identify the tail jump.&lt;/li&gt;
&lt;li&gt;Petit - Known to keep one import per library from the original binary to avoid the need to use &lt;code&gt;LoadLibraryA&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;WinUpack - Look for a &lt;code&gt;push&lt;/code&gt;/&lt;code&gt;retn&lt;/code&gt; combo to jump to the OEP.&lt;/li&gt;
&lt;li&gt;Themida&lt;/li&gt;
&lt;/ul&gt;
- https://grazfather.github.io/posts/2016-11-06-manual-unpacking/ - </description>
        </item>
    
    
    
        <item>
        <title>Obfuscation Techniques</title>
        <link>https://grazfather.github.io/posts/2016-10-12-obfuscation-techniques/</link>
        <pubDate>Wed, 12 Oct 2016 12:00:00 +0000</pubDate>
        
        <guid>https://grazfather.github.io/posts/2016-10-12-obfuscation-techniques/</guid>
        <description>Grazfather https://grazfather.github.io/posts/2016-10-12-obfuscation-techniques/ -&lt;p&gt;I don&amp;rsquo;t know where I got these notes from, but I found them on my evernote and I thought they were worth exporting here.&lt;/p&gt;
&lt;h1 id=&#34;data-based-obfuscation&#34;&gt;Data-based obfuscation&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Constant Unfolding
&lt;ul&gt;
&lt;li&gt;A compiler would do something like replace x = 4 * 5 with x = 20. This does the opposite.
&lt;ul&gt;
&lt;li&gt;e.g. &lt;code&gt;push 0F9CBE47ah, add dword ptr [esp], 6341B86h&lt;/code&gt;. This is effectively &lt;code&gt;push 0h&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dead Code Insertion
&lt;ul&gt;
&lt;li&gt;Simply add code that has no effect but wastes the reverse engineer&amp;rsquo;s time.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Arithmetic Substitution via Identities
&lt;ul&gt;
&lt;li&gt;Replace simple things (e.g. &lt;code&gt;not eax&lt;/code&gt;) with a more complicated form with the same functionality (&lt;code&gt;xor eax, 0FFFFFFFFh&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pattern-Based Obfuscation
&lt;ul&gt;
&lt;li&gt;Map one or more instructions to a more complicated sequence of instructions that are semantically equivalent. Can be run multiple times.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;control-based-obfuscation&#34;&gt;Control-based obfuscation&lt;/h1&gt;
&lt;p&gt;Break the assumptions that reverse engineers have made on how compilers work.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CALLs return, exceptions are used for exceptional cases, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Functions In/Out-Lining&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Inline some functions, break other sections into their own functions so that the call graph doesn&amp;rsquo;t make sense.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Destruction of Sequential and Temporal Locality&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;jmp&lt;/code&gt; everywhere.&lt;/li&gt;
&lt;li&gt;Easy for disassemblers to line up, but harder for people.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Processor-Based Control Indirection&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;e.g. &lt;code&gt;push &amp;lt;addr&amp;gt;, ret&lt;/code&gt; to simulate &lt;code&gt;jmp &amp;lt;addr&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;call&lt;/code&gt; as &lt;code&gt;jmp&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;target_addr&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;junk&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;code&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;gt;&lt;/span&gt;
target_addr:
&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;esp&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;; get rid of RA on stack
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Modify RA on stack:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;basic_block_a:
&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;esp&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;ret&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;...&lt;/span&gt;
basic_block_b:
&lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;basic_block_a&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;junk&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;code&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;gt;&lt;/span&gt;
true_return_addr:
&lt;span style=&#34;color:#a6e22e&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Operating-System-Based Control Indirection&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;e.g. use SEH by adding a handler and then causing an exception.
&lt;ul&gt;
&lt;li&gt;Can be good for anti-debug, since debuggers often catch these. Target program can count on its own handler running and detect when the debugger does instead.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Opaque Predicates&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add spurious alternate branches to unconditional jumps.&lt;/li&gt;
&lt;li&gt;Add two branches that are semantically identical but obfuscated differently.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;simultaneous-control-flow-and-data-flow-obfuscation&#34;&gt;Simultaneous Control-flow and Data-flow obfuscation&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Inserting Junk Code&lt;/li&gt;
&lt;li&gt;Control-Flow Graph Flattening
&lt;ul&gt;
&lt;li&gt;Use a &amp;lsquo;dispatcher&amp;rsquo; that maintains state and takes different branches based on current state, so relationships between basic blocks are hidden in the implementation of the dispatcher.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Virtual Machines
&lt;ul&gt;
&lt;li&gt;Use a VM to run virtualized code.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;White Box Cryptography
&lt;ul&gt;
&lt;li&gt;White-box attack context: An attacker model that assumed an attacker (reverse engineer) can execute the app in an environment that he or she perfectly controls.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
- https://grazfather.github.io/posts/2016-10-12-obfuscation-techniques/ - </description>
        </item>
    
    
  </channel>
</rss> 