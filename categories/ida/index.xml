<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ida on Grazfather</title>
    <link>https://grazfather.github.io/categories/ida/</link>
    <description>Recent content in ida on Grazfather</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Sun, 18 Sep 2016 12:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://grazfather.github.io/categories/ida/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Anti-Debugging Techniques and Mitigation</title>
      <link>https://grazfather.github.io/posts/2016-09-18-anti-debugging/</link>
      <pubDate>Sun, 18 Sep 2016 12:00:00 +0000</pubDate>
      
      <guid>https://grazfather.github.io/posts/2016-09-18-anti-debugging/</guid>
      <description>Techniques   Windows
 API methods:  IsDebuggerPresent CheckRemoteDebuggerPresent NtQueryInformationProcess OutputDebugString/GetLastError   Manually checking structures  Check BeingDebugged in PEB (in fs:[30]). Check ForceFlags:  In fs:[30][18][10] on Windows XP. In fs:[30][18][44] on Windows 7 32 bit.   Check Flags:  In fs:[30][18][0C] on Windows XP. In fs:[30][18][40] on Windows 7 32 bit.   Check NTGlobalFlag at fs:[30][68] == 0x70. Look for debuggers specifically:  Check registry.</description>
    </item>
    
    <item>
      <title>Anti-Disassembly Techniques and Mitigation</title>
      <link>https://grazfather.github.io/posts/2016-09-18-anti-disassembly/</link>
      <pubDate>Sun, 18 Sep 2016 12:00:00 +0000</pubDate>
      
      <guid>https://grazfather.github.io/posts/2016-09-18-anti-disassembly/</guid>
      <description>This is just a small collection of notes about disassembly and anti-disassembly tricks, and how to get around them.
How disassemblers work The simplest disassembler is super simple, but they can also be very complicated. More advanced disassemblers try to recognize things like functions (which may have multiples returns), idioms like jump tables, and not get tricked by anti-disassembly tricks. They come in two general categories.
 Linear - Dissassembles all instructions in order, starting from some point (usually the entry point of a binary).</description>
    </item>
    
  </channel>
</rss>