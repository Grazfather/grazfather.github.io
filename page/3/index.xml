<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Grazfather</title>
    <link>https://grazfather.github.io/</link>
    <description>Recent content on Grazfather</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Sun, 08 Dec 2019 12:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://grazfather.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>Sharif CTF 2016 - RE100 ‘Android App’ Writeup</title>
        <link>https://grazfather.github.io/posts/2016-02-14-sharif-ctf-re100-android-app-writeup/</link>
        <pubDate>Sun, 14 Feb 2016 15:00:00 +0000</pubDate>
        
        <guid>https://grazfather.github.io/posts/2016-02-14-sharif-ctf-re100-android-app-writeup/</guid>
        <description>Grazfather https://grazfather.github.io/posts/2016-02-14-sharif-ctf-re100-android-app-writeup/ -&lt;p&gt;This one I didn&amp;rsquo;t actually solve in time, because I spent too much time trying to a) Use &lt;a href=&#34;http://frida.re&#34;&gt;frida&lt;/a&gt; and b) RE the args to the two import functions.&lt;/p&gt;
&lt;p&gt;Because I am a fan of Frida (first cutting my teeth on it during the 2015 Flare On challenge), I decided I would use it in lieu of a debugger for this challenge (I didn&amp;rsquo;t want to figure out the toolchain to get the lldb client running on my mac).&lt;/p&gt;
&lt;p&gt;Starting with &lt;code&gt;dex2jar&lt;/code&gt; I took the apk apart and took a quick peek at the two main classes. They use JNI to call into two functions in the provided dynamic library, and then generate the flag based on result. Because one function seeds the Java code to generate the flag, and the other takes the same input, but only returns success, I spent almost no time in Java land and instead went directly into looking at the native code.&lt;/p&gt;
&lt;p&gt;Loading up the library in IDA, I was a little intimidated because of the unfamiliar ISA and what looked like a parser. I decided to try to do this dynamically, so this is when I decided &lt;code&gt;frida-trace&lt;/code&gt; would be my friend.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://grazfather.github.io/assets/2016-02-14-Sharif-CTF-RE100-Android-App-1.png&#34; alt=&#34;No thanks&#34;&gt;&lt;/p&gt;
&lt;p&gt;Setting up &lt;code&gt;frida&lt;/code&gt; is very straight forward:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;adb install Sharif_CTF.apk
adb push frida-server /data/local/tmp
adb shell
su
/data/local/tmp/frida-server&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I could then instrument the application and play around with it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;frida-ps -U|grep ctf
frida-trace -U -p &amp;lt;pid&amp;gt; -i &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;*isCorrect*&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I spent &lt;em&gt;way&lt;/em&gt; more time than I would like to admit here, playing with &lt;code&gt;Memory.read&amp;lt;X&amp;gt;&lt;/code&gt; trying to read out the arguments and return value, but the problem was that this function is provided a Java string, whose structure I am unfamiliar with. Part of the complexity of the native functions are surely just getting the C string out of the &lt;code&gt;String&lt;/code&gt; object, but I didn&amp;rsquo;t feel like figuring that out.&lt;/p&gt;
&lt;p&gt;If I wanted to see what was going on &lt;em&gt;easily&lt;/em&gt; I&amp;rsquo;d want to find a function that takes C strings, which are easy to read from. Lucky for me, the &lt;code&gt;isCorrect&lt;/code&gt; function imports &lt;code&gt;strcmp&lt;/code&gt; from &lt;em&gt;libc.so&lt;/em&gt;. It can&amp;rsquo;t be that easy&amp;hellip; can it?&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://grazfather.github.io/assets/2016-02-14-Sharif-CTF-RE100-Android-App-2.png&#34; alt=&#34;Calling strcmp&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;frida-trace -U -p &amp;lt;pid&amp;gt; -i &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;*strcmp*&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Editing the created &lt;em&gt;strcmp.js&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;onEnter&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;state&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;strcmp(&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Memory&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;readUtf8String&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;Memory&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;readUtf8String&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;);
},
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then just hitting &amp;lsquo;Login&amp;rsquo; on the app:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;2059&lt;/span&gt; ms  strcmp&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Serial Number,ef57f3fe3cf603c03890ee588878c0ec&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, remember that this isn&amp;rsquo;t the flag, but what is compared against to determine if we have the correct login. We could fake the retval from this function to return true, but that would make the flag generation fail. Instead, just enter &amp;lsquo;ef57f3fe3cf603c03890ee588878c0ec&amp;rsquo; into the prompt, which will be passed to both lib function, which should properly seed the Java code, and see the flag pop out.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://grazfather.github.io/assets/2016-02-14-Sharif-CTF-RE100-Android-App-3.png&#34; alt=&#34;Flag&#34;&gt;&lt;/p&gt;
&lt;p&gt;flag: Sharif_CTF{833489ef285e6fa80690099efc5d9c9d}&lt;/p&gt;
- https://grazfather.github.io/posts/2016-02-14-sharif-ctf-re100-android-app-writeup/ - </description>
        </item>
    
    
    
        <item>
        <title>Sharif CTF 2016 - RE150 ‘Serial’ Writeup</title>
        <link>https://grazfather.github.io/posts/2016-02-06-sharif-ctf-re150-serial-writeup/</link>
        <pubDate>Sat, 06 Feb 2016 17:04:23 +0000</pubDate>
        
        <guid>https://grazfather.github.io/posts/2016-02-06-sharif-ctf-re150-serial-writeup/</guid>
        <description>Grazfather https://grazfather.github.io/posts/2016-02-06-sharif-ctf-re150-serial-writeup/ -&lt;p&gt;Starting out as I always do, I ran &lt;code&gt;file&lt;/code&gt;, &lt;code&gt;strings&lt;/code&gt;, etc, then ran in my VM in &lt;code&gt;gdb&lt;/code&gt; and opened the binary in IDA Pro. The first thing I noticed is that IDA can&amp;rsquo;t view main in graph mode &amp;ndash; They are likely jumping around weird to trick disassemblers.&lt;/p&gt;
&lt;p&gt;Looking in IDA, a few instruction into main there&amp;rsquo;s a jump &lt;em&gt;back&lt;/em&gt; a few bytes, into the middle of another instruction &amp;ndash; suspicions confirmed. That&amp;rsquo;s no problem. Hit &lt;code&gt;D&lt;/code&gt; on the instruction that overlaps with the jump target to turn the code into data, move to the correct byte, and then hit &lt;code&gt;C&lt;/code&gt; to start disassembling from there.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://grazfather.github.io/assets/2016-02-06-Sharif-CTF-RE150-Serial-1.png&#34; alt=&#34;before&#34;&gt;&lt;/p&gt;
&lt;p&gt;Becomes&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://grazfather.github.io/assets/2016-02-06-Sharif-CTF-RE150-Serial-2.png&#34; alt=&#34;after&#34;&gt;&lt;/p&gt;
&lt;p&gt;That makes more sense, but there&amp;rsquo;s another jump into the middle of some instructions. You&amp;rsquo;ll find this a lot in this binary, but you can just keep hitting &lt;code&gt;D&lt;/code&gt; and &lt;code&gt;C&lt;/code&gt; to fix it up. Since the jumps go backwards, you&amp;rsquo;ll be disassembling &amp;lsquo;over&amp;rsquo; some of the jumps, but because they&amp;rsquo;re only there to confuse you, you can pretty much just follow the code straight down.&lt;/p&gt;
&lt;p&gt;After doing that cleanup twice we see a reference to the first string we see &amp;ldquo;Please Enter the valid key!\n&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Continuing to clean as you proceed down, there&amp;rsquo;s a call to &lt;code&gt;strlen&lt;/code&gt; ensuring the length is 16 bytes. I like to put breakpoints on checks like these and restart the program to validate, but otherwise do most of my work statically.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;b *0x400A2C
r
&lt;span style=&#34;color:#ae81ff&#34;&gt;123456&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# bp is hit, ensure it doesn&amp;#39;t jump&lt;/span&gt;
r &lt;span style=&#34;color:#75715e&#34;&gt;# restart&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;1234567890123456&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# bp is hit, make sure it jumps&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;https://grazfather.github.io/assets/2016-02-06-Sharif-CTF-RE150-Serial-3.png&#34; alt=&#34;char compare&#34;&gt;&lt;/p&gt;
&lt;p&gt;The rest of the check is straight forward: It checks that the &lt;em&gt;x&lt;/em&gt;th byte is some hard code value, and then checks that the value of the &lt;em&gt;x&lt;/em&gt;th byte &lt;em&gt;from the back&lt;/em&gt;, plus the &lt;em&gt;x&lt;/em&gt;th byte adds up to some other hardcoded value. You can hit &lt;code&gt;R&lt;/code&gt; on the byte values to see the ASCII representation, but this won&amp;rsquo;t work on the back half checks, because the two characters&amp;rsquo; sums aren&amp;rsquo;t likely still in the ASCII range. After 8 of these double checks you should have what you need.&lt;/p&gt;
&lt;p&gt;flag: EZ9dmq4c8g9G7bAV&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;vagrant@kali:/vagrant$ echo EZ9dmq4c8g9G7bAV | ./serial
Please Enter the valid key!
Serial number is valid :&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
- https://grazfather.github.io/posts/2016-02-06-sharif-ctf-re150-serial-writeup/ - </description>
        </item>
    
    
    
        <item>
        <title>My Reading Summary - January 2016</title>
        <link>https://grazfather.github.io/posts/2016-02-01-reading-january-2016/</link>
        <pubDate>Mon, 01 Feb 2016 12:00:00 +0000</pubDate>
        
        <guid>https://grazfather.github.io/posts/2016-02-01-reading-january-2016/</guid>
        <description>Grazfather https://grazfather.github.io/posts/2016-02-01-reading-january-2016/ -&lt;p&gt;&lt;strong&gt;A Game Plan for Life: The Power of Mentoring&lt;/strong&gt; - This book was a recommendation from my brother, and I was hesitant to read it just because I had a huge book queue, and I don&amp;rsquo;t care about basketball. I was bored, though, on my flight home from Christmas vacation, so I cracked it open, and I am glad it did. John Wooden, the legendary UCLA basketkall coach, starts off talking about seven people whom he believes were important mentors in his life including some people whom he&amp;rsquo;s never met (like Abraham Lincoln). The second half is not written by him, and instead seven mentorees of his talk about how mentoring has changed their lives. While I normally prefer books that have practical tips or new information, this book inspired me to more actively mentor as well as to seek out better mentors in my life.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Watchmen&lt;/strong&gt; - This graphic novel took me over a year to get through. It wasn&amp;rsquo;t bad my any means, but I just was not enthralled. Having seen the movie, I know the basic plot points, and I just didn&amp;rsquo;t care for the rest of the filler. I think graphical novels just aren&amp;rsquo;t for me.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mindset: The New Psychology of Success&lt;/strong&gt; - I think Carol Dweck&amp;rsquo;s idea here holds water, and I feel I was probably in the &amp;lsquo;fixed&amp;rsquo; mindset for a big part of my childhood. While I think an important read, it&amp;rsquo;s not a good one. The author spends most of the book with anecdotes of failure or success, and she has to try &lt;strong&gt;so&lt;/strong&gt; hard to shoehorn them to fit into her paradigm. Carol: Your ideas can work for most cases, they don&amp;rsquo;t have to apply to every situation ever. The little bits where she mentions studies seem sloppy and glanced over compared to the stories that she apparently finds more valuable. I think this book is for convincing people who aren&amp;rsquo;t convinced by data, but instead by story telling, and I am not that kind of person.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Practical Vim: Edit Text at the Speed of Thought&lt;/strong&gt; - While I&amp;rsquo;ve been using &lt;code&gt;vim&lt;/code&gt; for a years now, I am still learning a lot. It&amp;rsquo;s easy to use a small subset of the features and not take advantage of anything below the surfaces. This book does a fantastic job of covering a good amount of breadth, always keeping the usage tied in with practical examples, while including enough technical details and depth to push the reader to dive even deeper on their own.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Between the World and Me&lt;/strong&gt; - The author here gives a first-hand perspective of life growing up in the US as a black person. While I find the stories interesting, I couldn&amp;rsquo;t get over his style of writing &amp;ndash; Too poetic. The problems he faces are definitely problems imposed by historical, racist, American culture, but he seems to believe we are still in the 1800s. He also puts the blame almost entirely on the white people, despite agreeing that the black people perpetuate it &amp;ndash; Are we not all a victim of this culture? While the description implies a solution of sorts, I don&amp;rsquo;t think he offers much more than a lacking, albeit compelling, perspective.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A Short History of Progress&lt;/strong&gt; - While the intent of this book is to warn us an impending collapse, I gained more from it as an easy to read introduction to the history of mankind. His stories of different peoples and their eventual demise - The neanderthal, the Romans, the Sumerians, to name a few &amp;ndash; were very interesting, but I can&amp;rsquo;t help but think, &amp;ldquo;We got it this time&amp;rdquo;. By the end of the book, as he talks of more recent cultures and even present day failings (massive land erosions, for example) he had me a lot more conviced.&lt;/p&gt;
- https://grazfather.github.io/posts/2016-02-01-reading-january-2016/ - </description>
        </item>
    
    
    
        <item>
        <title>My Reading Summary - 2015</title>
        <link>https://grazfather.github.io/posts/2016-01-01-reading-2015/</link>
        <pubDate>Fri, 01 Jan 2016 12:00:00 +0000</pubDate>
        
        <guid>https://grazfather.github.io/posts/2016-01-01-reading-2015/</guid>
        <description>Grazfather https://grazfather.github.io/posts/2016-01-01-reading-2015/ -&lt;p&gt;I intend to do these more frequently, but here’s a dump of the books I read last year.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Dinner&lt;/strong&gt; - I don&amp;rsquo;t often read fiction, and I kind of wish I hadn&amp;rsquo;t wasted my time with this one. There&amp;rsquo;s a subtle twist that&amp;rsquo;s delivered pretty well, but over all I just don&amp;rsquo;t think it was interesting enough to make it worth a 300 page book.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Gray Hat Python&lt;/strong&gt; - The examples are a lot of fun and the author does a pretty good job explaining how everything works. I did every single lab (&lt;a href=&#34;https://github.com/Grazfather/GrayHatPython&#34;&gt;https://github.com/Grazfather/GrayHatPython&lt;/a&gt;) and had to fix a lot of code. The code available on No Starch&amp;rsquo;s website doesn&amp;rsquo;t always match the code in the book, and doesn&amp;rsquo;t always work. I think this is a rather lower quality book than the normally high bar that No Starch Press holds, simply because what looks like sloppy proof reading. Over all, though, I enjoyed it a lot and learned some practical new tricks for pen testing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How Linux Works&lt;/strong&gt; - A pretty handy guide for a sysadmin, and it goes into more detail at the end of each chapter. Not the most exciting read, but I learned a good amount and still use it as a reference occasionally.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Proof: The Science of Booze&lt;/strong&gt; - I loved this book. The author blends the science along with stories quite well, though some might feel his style is a little bit erratic. I drank a good amount of whisky while reading this one.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The One-Page Financial Plan&lt;/strong&gt; - Ignoring the fact that the author lost his house during the housing crisis, there were some practical suggestions on how to plan your finances. It mostly boils down to figuring out what you want in life, making sure your partner agrees, and then allocating money appropriately. I was hoping for a book that was more on finance and less on life.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sub-Human, Post-Human, Trans-Human&lt;/strong&gt; - The author clearly has a vivid sense of imagination, and he is still starting out, but I wish it weren&amp;rsquo;t so obvious how inexperienced he is. I think he should spend more time on polish and less time pumping out books. Considering how good the ratings are on Amazon and Goodreads, I am almost offended: Having read a fair number of &amp;lsquo;classics&amp;rsquo; (Ender&amp;rsquo;s game, Foundation, Dune, etc.), I feel just in saying that this series cannot even hold a candle to them.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brain Rules&lt;/strong&gt; - I like that this book is backed by empirical studies and that the author expresses his ideas clearly. Each chapter is concluded with some practical applications of what we have just read. I will need to give this book a re-read, because I am afraid a lot of what I have learned has not stuck (and I need to repeat to remember :)).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Trust Me, I&amp;rsquo;m Lying&lt;/strong&gt; - I enjoyed this book a lot, but at the same time it made me angry with how news works today. I could see the obvious truth in most of what he was saying, but hadn&amp;rsquo;t noticed it as much until it was laid before me, so I would say it&amp;rsquo;s helped reinvigorated my cynicism. He doesn&amp;rsquo;t offer too much in the way of how to reverse the problematic path we are on, which I think would have been most helpful but now I know to read everything with an eye of skepticism.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Technopoly&lt;/strong&gt; - While I would consider the author a bona fide Luddite, I think he does make some valid points, and I found his stories of the past (including the Luddites) interesting. His main point is that no technology has no downsides, but I believe he fails to make a compelling argument that new technology has a net negative affect on society.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Effective Python&lt;/strong&gt; - This book goes over 59 tips to improve your python code, and I found most handy. There was a mix of what I owould call &amp;lsquo;obvious&amp;rsquo; tips mixed in with some tips that I definitely learned from. I wish the book were a bit more advanced, maybe delving deeper into generators, coroutines, and perhaps metaclasses. Most examples included python3, which I appreciate, and the samples had beautiful syntax highlighting. I recommend this book to my junior developers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How to Solve It&lt;/strong&gt; - Apparently a classic in the math field, and I can see why. Polya goes into good detail and organizes his book basically as a big glossary. While I enjoyed this book, I found it a bit too abstract for direct application in my life. I am also not sure if math parlance has changed much since Polya penned this, but I did not know much of the terms he was using (e.g. shapes) but when I looked them up, found much simpler synonyms that I had been taught in school.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Power of Habit&lt;/strong&gt; - A very easy read, with good anecdotes. While I believe his method could work, it&amp;rsquo;s mostly applicable for recognizing when you&amp;rsquo;re falling into a bad habit, and for finding a way to replace it with a better habit. I was hoping more for a book that would help with forming new, good habits, because I don&amp;rsquo;t feel I have many of the bad habits, like those he uses as examples (e.g. smoking or over eating).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Code Complete&lt;/strong&gt; - A beast of a book, but filled with plenty of very applicable tips and frameworks to follow. With the fast pace of advancement in software development, I feel that this new edition is already beginning to show its age. Most of the cited sources seem to be from the 60s to the 90s, and we have made leaps and bounds in this field in the decades since. The book is also probably more verbose than it needs to, and I found many of the figures to be nothing more than padding. A new edition of this book, that is maybe 100 pages shorter, would be fantastic, but I still recommend this book to any developer who asks.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Now I Know&lt;/strong&gt; - I have subscribed to Dan&amp;rsquo;s newsletter for years now. I bought this book to support him, and to see the extra entries he wasn&amp;rsquo;t going to publish in his newsletter. By the time I went to read it, though, I think I had read already 80+% of it online. Still a fun bathroom reader.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Zen and the Art of Motorcycle Maintenance&lt;/strong&gt; - This had been on my &amp;lsquo;toread&amp;rsquo; list for years now, and I am glad I finally got around to reading it. It was an enjoyable story and had an interesting method. I am not sure what to take from it, but it does motivate me to care more about what I produce, which may be the point.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Black Hat Python&lt;/strong&gt; - The sequel to Gray Hat Python focuses more on network-related pen testing, and I think it does a good job. While I am typically more interested in lower-level, host-based pen testing, I really enjoyed the examples, though they seemed to have a bit less depth than the examples in Gray Hat Python, barring the last few in the book. I found fewer mistakes in the code, which I appreciate, but the end of the book seemed to have fallen back to its lazy ways. The libraries used, overall, are more well known, available, and OS agnostic, instead of constraining 90% of its usefulness to someone running windows. Overall it&amp;rsquo;s an approachable book to practical pen-testing, and a decent introduction to the many python libraries out there.&lt;/p&gt;
- https://grazfather.github.io/posts/2016-01-01-reading-2015/ - </description>
        </item>
    
    
    
    
    
    
  </channel>
</rss> 